/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MountsUpdateRequest
 */
export interface MountsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    mountId: string;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    type?: MountsUpdateRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    hostPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    volumeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    filePath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    serviceType?: MountsUpdateRequestServiceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    mountPath?: string;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    postgresId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    mariadbId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    mongoId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    mysqlId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    redisId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MountsUpdateRequest
     */
    composeId?: string | null;
}


/**
 * @export
 */
export const MountsUpdateRequestTypeEnum = {
    Bind: 'bind',
    Volume: 'volume',
    File: 'file'
} as const;
export type MountsUpdateRequestTypeEnum = typeof MountsUpdateRequestTypeEnum[keyof typeof MountsUpdateRequestTypeEnum];

/**
 * @export
 */
export const MountsUpdateRequestServiceTypeEnum = {
    Application: 'application',
    Postgres: 'postgres',
    Mysql: 'mysql',
    Mariadb: 'mariadb',
    Mongo: 'mongo',
    Redis: 'redis',
    Compose: 'compose'
} as const;
export type MountsUpdateRequestServiceTypeEnum = typeof MountsUpdateRequestServiceTypeEnum[keyof typeof MountsUpdateRequestServiceTypeEnum];


/**
 * Check if a given object implements the MountsUpdateRequest interface.
 */
export function instanceOfMountsUpdateRequest(value: object): value is MountsUpdateRequest {
    if (!('mountId' in value) || value['mountId'] === undefined) return false;
    return true;
}

export function MountsUpdateRequestFromJSON(json: any): MountsUpdateRequest {
    return MountsUpdateRequestFromJSONTyped(json, false);
}

export function MountsUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MountsUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'mountId': json['mountId'],
        'type': json['type'] == null ? undefined : json['type'],
        'hostPath': json['hostPath'] == null ? undefined : json['hostPath'],
        'volumeName': json['volumeName'] == null ? undefined : json['volumeName'],
        'filePath': json['filePath'] == null ? undefined : json['filePath'],
        'content': json['content'] == null ? undefined : json['content'],
        'serviceType': json['serviceType'] == null ? undefined : json['serviceType'],
        'mountPath': json['mountPath'] == null ? undefined : json['mountPath'],
        'applicationId': json['applicationId'] == null ? undefined : json['applicationId'],
        'postgresId': json['postgresId'] == null ? undefined : json['postgresId'],
        'mariadbId': json['mariadbId'] == null ? undefined : json['mariadbId'],
        'mongoId': json['mongoId'] == null ? undefined : json['mongoId'],
        'mysqlId': json['mysqlId'] == null ? undefined : json['mysqlId'],
        'redisId': json['redisId'] == null ? undefined : json['redisId'],
        'composeId': json['composeId'] == null ? undefined : json['composeId'],
    };
}

export function MountsUpdateRequestToJSON(json: any): MountsUpdateRequest {
    return MountsUpdateRequestToJSONTyped(json, false);
}

export function MountsUpdateRequestToJSONTyped(value?: MountsUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mountId': value['mountId'],
        'type': value['type'],
        'hostPath': value['hostPath'],
        'volumeName': value['volumeName'],
        'filePath': value['filePath'],
        'content': value['content'],
        'serviceType': value['serviceType'],
        'mountPath': value['mountPath'],
        'applicationId': value['applicationId'],
        'postgresId': value['postgresId'],
        'mariadbId': value['mariadbId'],
        'mongoId': value['mongoId'],
        'mysqlId': value['mysqlId'],
        'redisId': value['redisId'],
        'composeId': value['composeId'],
    };
}

