/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AiDeployRequestDomainsInner } from './AiDeployRequestDomainsInner';
import {
    AiDeployRequestDomainsInnerFromJSON,
    AiDeployRequestDomainsInnerFromJSONTyped,
    AiDeployRequestDomainsInnerToJSON,
    AiDeployRequestDomainsInnerToJSONTyped,
} from './AiDeployRequestDomainsInner';
import type { AiDeployRequestConfigFilesInner } from './AiDeployRequestConfigFilesInner';
import {
    AiDeployRequestConfigFilesInnerFromJSON,
    AiDeployRequestConfigFilesInnerFromJSONTyped,
    AiDeployRequestConfigFilesInnerToJSON,
    AiDeployRequestConfigFilesInnerToJSONTyped,
} from './AiDeployRequestConfigFilesInner';

/**
 * 
 * @export
 * @interface AiDeployRequest
 */
export interface AiDeployRequest {
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    projectId: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    dockerCompose: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    envVariables: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    serverId?: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AiDeployRequest
     */
    description: string;
    /**
     * 
     * @type {Array<AiDeployRequestDomainsInner>}
     * @memberof AiDeployRequest
     */
    domains?: Array<AiDeployRequestDomainsInner>;
    /**
     * 
     * @type {Array<AiDeployRequestConfigFilesInner>}
     * @memberof AiDeployRequest
     */
    configFiles?: Array<AiDeployRequestConfigFilesInner>;
}

/**
 * Check if a given object implements the AiDeployRequest interface.
 */
export function instanceOfAiDeployRequest(value: object): value is AiDeployRequest {
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('dockerCompose' in value) || value['dockerCompose'] === undefined) return false;
    if (!('envVariables' in value) || value['envVariables'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function AiDeployRequestFromJSON(json: any): AiDeployRequest {
    return AiDeployRequestFromJSONTyped(json, false);
}

export function AiDeployRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AiDeployRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'projectId': json['projectId'],
        'id': json['id'],
        'dockerCompose': json['dockerCompose'],
        'envVariables': json['envVariables'],
        'serverId': json['serverId'] == null ? undefined : json['serverId'],
        'name': json['name'],
        'description': json['description'],
        'domains': json['domains'] == null ? undefined : ((json['domains'] as Array<any>).map(AiDeployRequestDomainsInnerFromJSON)),
        'configFiles': json['configFiles'] == null ? undefined : ((json['configFiles'] as Array<any>).map(AiDeployRequestConfigFilesInnerFromJSON)),
    };
}

export function AiDeployRequestToJSON(json: any): AiDeployRequest {
    return AiDeployRequestToJSONTyped(json, false);
}

export function AiDeployRequestToJSONTyped(value?: AiDeployRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'projectId': value['projectId'],
        'id': value['id'],
        'dockerCompose': value['dockerCompose'],
        'envVariables': value['envVariables'],
        'serverId': value['serverId'],
        'name': value['name'],
        'description': value['description'],
        'domains': value['domains'] == null ? undefined : ((value['domains'] as Array<any>).map(AiDeployRequestDomainsInnerToJSON)),
        'configFiles': value['configFiles'] == null ? undefined : ((value['configFiles'] as Array<any>).map(AiDeployRequestConfigFilesInnerToJSON)),
    };
}

