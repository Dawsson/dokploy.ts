/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegistryCreateRequest
 */
export interface RegistryCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    registryName: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    registryUrl: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    registryType: RegistryCreateRequestRegistryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    imagePrefix: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegistryCreateRequest
     */
    serverId?: string;
}


/**
 * @export
 */
export const RegistryCreateRequestRegistryTypeEnum = {
    Cloud: 'cloud'
} as const;
export type RegistryCreateRequestRegistryTypeEnum = typeof RegistryCreateRequestRegistryTypeEnum[keyof typeof RegistryCreateRequestRegistryTypeEnum];


/**
 * Check if a given object implements the RegistryCreateRequest interface.
 */
export function instanceOfRegistryCreateRequest(value: object): value is RegistryCreateRequest {
    if (!('registryName' in value) || value['registryName'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('registryUrl' in value) || value['registryUrl'] === undefined) return false;
    if (!('registryType' in value) || value['registryType'] === undefined) return false;
    if (!('imagePrefix' in value) || value['imagePrefix'] === undefined) return false;
    return true;
}

export function RegistryCreateRequestFromJSON(json: any): RegistryCreateRequest {
    return RegistryCreateRequestFromJSONTyped(json, false);
}

export function RegistryCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistryCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'registryName': json['registryName'],
        'username': json['username'],
        'password': json['password'],
        'registryUrl': json['registryUrl'],
        'registryType': json['registryType'],
        'imagePrefix': json['imagePrefix'],
        'serverId': json['serverId'] == null ? undefined : json['serverId'],
    };
}

export function RegistryCreateRequestToJSON(json: any): RegistryCreateRequest {
    return RegistryCreateRequestToJSONTyped(json, false);
}

export function RegistryCreateRequestToJSONTyped(value?: RegistryCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'registryName': value['registryName'],
        'username': value['username'],
        'password': value['password'],
        'registryUrl': value['registryUrl'],
        'registryType': value['registryType'],
        'imagePrefix': value['imagePrefix'],
        'serverId': value['serverId'],
    };
}

