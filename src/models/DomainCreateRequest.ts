/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DomainCreateRequest
 */
export interface DomainCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    path?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DomainCreateRequest
     */
    port?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DomainCreateRequest
     */
    https?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    applicationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    certificateType?: DomainCreateRequestCertificateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    customCertResolver?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    composeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    serviceName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    domainType?: DomainCreateRequestDomainTypeEnum | null;
    /**
     * 
     * @type {string}
     * @memberof DomainCreateRequest
     */
    previewDeploymentId?: string | null;
}


/**
 * @export
 */
export const DomainCreateRequestCertificateTypeEnum = {
    Letsencrypt: 'letsencrypt',
    None: 'none',
    Custom: 'custom'
} as const;
export type DomainCreateRequestCertificateTypeEnum = typeof DomainCreateRequestCertificateTypeEnum[keyof typeof DomainCreateRequestCertificateTypeEnum];

/**
 * @export
 */
export const DomainCreateRequestDomainTypeEnum = {
    Compose: 'compose',
    Application: 'application',
    Preview: 'preview'
} as const;
export type DomainCreateRequestDomainTypeEnum = typeof DomainCreateRequestDomainTypeEnum[keyof typeof DomainCreateRequestDomainTypeEnum];


/**
 * Check if a given object implements the DomainCreateRequest interface.
 */
export function instanceOfDomainCreateRequest(value: object): value is DomainCreateRequest {
    if (!('host' in value) || value['host'] === undefined) return false;
    return true;
}

export function DomainCreateRequestFromJSON(json: any): DomainCreateRequest {
    return DomainCreateRequestFromJSONTyped(json, false);
}

export function DomainCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'host': json['host'],
        'path': json['path'] == null ? undefined : json['path'],
        'port': json['port'] == null ? undefined : json['port'],
        'https': json['https'] == null ? undefined : json['https'],
        'applicationId': json['applicationId'] == null ? undefined : json['applicationId'],
        'certificateType': json['certificateType'] == null ? undefined : json['certificateType'],
        'customCertResolver': json['customCertResolver'] == null ? undefined : json['customCertResolver'],
        'composeId': json['composeId'] == null ? undefined : json['composeId'],
        'serviceName': json['serviceName'] == null ? undefined : json['serviceName'],
        'domainType': json['domainType'] == null ? undefined : json['domainType'],
        'previewDeploymentId': json['previewDeploymentId'] == null ? undefined : json['previewDeploymentId'],
    };
}

export function DomainCreateRequestToJSON(json: any): DomainCreateRequest {
    return DomainCreateRequestToJSONTyped(json, false);
}

export function DomainCreateRequestToJSONTyped(value?: DomainCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'host': value['host'],
        'path': value['path'],
        'port': value['port'],
        'https': value['https'],
        'applicationId': value['applicationId'],
        'certificateType': value['certificateType'],
        'customCertResolver': value['customCertResolver'],
        'composeId': value['composeId'],
        'serviceName': value['serviceName'],
        'domainType': value['domainType'],
        'previewDeploymentId': value['previewDeploymentId'],
    };
}

