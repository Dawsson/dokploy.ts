/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BitbucketUpdateRequest
 */
export interface BitbucketUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    bitbucketId: string;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    bitbucketUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    appPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    bitbucketWorkspaceName?: string;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    gitProviderId: string;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BitbucketUpdateRequest
     */
    organizationId?: string;
}

/**
 * Check if a given object implements the BitbucketUpdateRequest interface.
 */
export function instanceOfBitbucketUpdateRequest(value: object): value is BitbucketUpdateRequest {
    if (!('bitbucketId' in value) || value['bitbucketId'] === undefined) return false;
    if (!('gitProviderId' in value) || value['gitProviderId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function BitbucketUpdateRequestFromJSON(json: any): BitbucketUpdateRequest {
    return BitbucketUpdateRequestFromJSONTyped(json, false);
}

export function BitbucketUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BitbucketUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'bitbucketId': json['bitbucketId'],
        'bitbucketUsername': json['bitbucketUsername'] == null ? undefined : json['bitbucketUsername'],
        'appPassword': json['appPassword'] == null ? undefined : json['appPassword'],
        'bitbucketWorkspaceName': json['bitbucketWorkspaceName'] == null ? undefined : json['bitbucketWorkspaceName'],
        'gitProviderId': json['gitProviderId'],
        'name': json['name'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
    };
}

export function BitbucketUpdateRequestToJSON(json: any): BitbucketUpdateRequest {
    return BitbucketUpdateRequestToJSONTyped(json, false);
}

export function BitbucketUpdateRequestToJSONTyped(value?: BitbucketUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bitbucketId': value['bitbucketId'],
        'bitbucketUsername': value['bitbucketUsername'],
        'appPassword': value['appPassword'],
        'bitbucketWorkspaceName': value['bitbucketWorkspaceName'],
        'gitProviderId': value['gitProviderId'],
        'name': value['name'],
        'organizationId': value['organizationId'],
    };
}

