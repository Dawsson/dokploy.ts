/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GitlabUpdateRequest
 */
export interface GitlabUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    gitlabId: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    gitlabUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    applicationId?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    redirectUri?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    accessToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    refreshToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    groupName?: string;
    /**
     * 
     * @type {number}
     * @memberof GitlabUpdateRequest
     */
    expiresAt?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    gitProviderId: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabUpdateRequest
     */
    name: string;
}

/**
 * Check if a given object implements the GitlabUpdateRequest interface.
 */
export function instanceOfGitlabUpdateRequest(value: object): value is GitlabUpdateRequest {
    if (!('gitlabId' in value) || value['gitlabId'] === undefined) return false;
    if (!('gitlabUrl' in value) || value['gitlabUrl'] === undefined) return false;
    if (!('gitProviderId' in value) || value['gitProviderId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function GitlabUpdateRequestFromJSON(json: any): GitlabUpdateRequest {
    return GitlabUpdateRequestFromJSONTyped(json, false);
}

export function GitlabUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GitlabUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'gitlabId': json['gitlabId'],
        'gitlabUrl': json['gitlabUrl'],
        'applicationId': json['applicationId'] == null ? undefined : json['applicationId'],
        'redirectUri': json['redirectUri'] == null ? undefined : json['redirectUri'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'groupName': json['groupName'] == null ? undefined : json['groupName'],
        'expiresAt': json['expiresAt'] == null ? undefined : json['expiresAt'],
        'gitProviderId': json['gitProviderId'],
        'name': json['name'],
    };
}

export function GitlabUpdateRequestToJSON(json: any): GitlabUpdateRequest {
    return GitlabUpdateRequestToJSONTyped(json, false);
}

export function GitlabUpdateRequestToJSONTyped(value?: GitlabUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gitlabId': value['gitlabId'],
        'gitlabUrl': value['gitlabUrl'],
        'applicationId': value['applicationId'],
        'redirectUri': value['redirectUri'],
        'secret': value['secret'],
        'accessToken': value['accessToken'],
        'refreshToken': value['refreshToken'],
        'groupName': value['groupName'],
        'expiresAt': value['expiresAt'],
        'gitProviderId': value['gitProviderId'],
        'name': value['name'],
    };
}

