/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApplicationSaveBitbucketProviderRequest
 */
export interface ApplicationSaveBitbucketProviderRequest {
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    bitbucketBranch: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    bitbucketBuildPath: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    bitbucketOwner: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    bitbucketRepository: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    bitbucketId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    applicationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    watchPaths?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationSaveBitbucketProviderRequest
     */
    enableSubmodules: boolean;
}

/**
 * Check if a given object implements the ApplicationSaveBitbucketProviderRequest interface.
 */
export function instanceOfApplicationSaveBitbucketProviderRequest(value: object): value is ApplicationSaveBitbucketProviderRequest {
    if (!('bitbucketBranch' in value) || value['bitbucketBranch'] === undefined) return false;
    if (!('bitbucketBuildPath' in value) || value['bitbucketBuildPath'] === undefined) return false;
    if (!('bitbucketOwner' in value) || value['bitbucketOwner'] === undefined) return false;
    if (!('bitbucketRepository' in value) || value['bitbucketRepository'] === undefined) return false;
    if (!('bitbucketId' in value) || value['bitbucketId'] === undefined) return false;
    if (!('applicationId' in value) || value['applicationId'] === undefined) return false;
    if (!('enableSubmodules' in value) || value['enableSubmodules'] === undefined) return false;
    return true;
}

export function ApplicationSaveBitbucketProviderRequestFromJSON(json: any): ApplicationSaveBitbucketProviderRequest {
    return ApplicationSaveBitbucketProviderRequestFromJSONTyped(json, false);
}

export function ApplicationSaveBitbucketProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSaveBitbucketProviderRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'bitbucketBranch': json['bitbucketBranch'],
        'bitbucketBuildPath': json['bitbucketBuildPath'],
        'bitbucketOwner': json['bitbucketOwner'],
        'bitbucketRepository': json['bitbucketRepository'],
        'bitbucketId': json['bitbucketId'],
        'applicationId': json['applicationId'],
        'watchPaths': json['watchPaths'] == null ? undefined : json['watchPaths'],
        'enableSubmodules': json['enableSubmodules'],
    };
}

export function ApplicationSaveBitbucketProviderRequestToJSON(json: any): ApplicationSaveBitbucketProviderRequest {
    return ApplicationSaveBitbucketProviderRequestToJSONTyped(json, false);
}

export function ApplicationSaveBitbucketProviderRequestToJSONTyped(value?: ApplicationSaveBitbucketProviderRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bitbucketBranch': value['bitbucketBranch'],
        'bitbucketBuildPath': value['bitbucketBuildPath'],
        'bitbucketOwner': value['bitbucketOwner'],
        'bitbucketRepository': value['bitbucketRepository'],
        'bitbucketId': value['bitbucketId'],
        'applicationId': value['applicationId'],
        'watchPaths': value['watchPaths'],
        'enableSubmodules': value['enableSubmodules'],
    };
}

