/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NotificationCreateDiscordRequest
 */
export interface NotificationCreateDiscordRequest {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    appBuildError: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    databaseBackup: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    dokployRestart: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreateDiscordRequest
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    appDeploy: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    dockerCleanup: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    serverThreshold: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreateDiscordRequest
     */
    webhookUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationCreateDiscordRequest
     */
    decoration: boolean;
}

/**
 * Check if a given object implements the NotificationCreateDiscordRequest interface.
 */
export function instanceOfNotificationCreateDiscordRequest(value: object): value is NotificationCreateDiscordRequest {
    if (!('appBuildError' in value) || value['appBuildError'] === undefined) return false;
    if (!('databaseBackup' in value) || value['databaseBackup'] === undefined) return false;
    if (!('dokployRestart' in value) || value['dokployRestart'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('appDeploy' in value) || value['appDeploy'] === undefined) return false;
    if (!('dockerCleanup' in value) || value['dockerCleanup'] === undefined) return false;
    if (!('serverThreshold' in value) || value['serverThreshold'] === undefined) return false;
    if (!('webhookUrl' in value) || value['webhookUrl'] === undefined) return false;
    if (!('decoration' in value) || value['decoration'] === undefined) return false;
    return true;
}

export function NotificationCreateDiscordRequestFromJSON(json: any): NotificationCreateDiscordRequest {
    return NotificationCreateDiscordRequestFromJSONTyped(json, false);
}

export function NotificationCreateDiscordRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationCreateDiscordRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'appBuildError': json['appBuildError'],
        'databaseBackup': json['databaseBackup'],
        'dokployRestart': json['dokployRestart'],
        'name': json['name'],
        'appDeploy': json['appDeploy'],
        'dockerCleanup': json['dockerCleanup'],
        'serverThreshold': json['serverThreshold'],
        'webhookUrl': json['webhookUrl'],
        'decoration': json['decoration'],
    };
}

export function NotificationCreateDiscordRequestToJSON(json: any): NotificationCreateDiscordRequest {
    return NotificationCreateDiscordRequestToJSONTyped(json, false);
}

export function NotificationCreateDiscordRequestToJSONTyped(value?: NotificationCreateDiscordRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appBuildError': value['appBuildError'],
        'databaseBackup': value['databaseBackup'],
        'dokployRestart': value['dokployRestart'],
        'name': value['name'],
        'appDeploy': value['appDeploy'],
        'dockerCleanup': value['dockerCleanup'],
        'serverThreshold': value['serverThreshold'],
        'webhookUrl': value['webhookUrl'],
        'decoration': value['decoration'],
    };
}

