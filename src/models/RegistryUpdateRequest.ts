/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegistryUpdateRequest
 */
export interface RegistryUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    registryId: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    registryName?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    imagePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    registryUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    registryType?: RegistryUpdateRequestRegistryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    organizationId?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistryUpdateRequest
     */
    serverId?: string;
}


/**
 * @export
 */
export const RegistryUpdateRequestRegistryTypeEnum = {
    Cloud: 'cloud'
} as const;
export type RegistryUpdateRequestRegistryTypeEnum = typeof RegistryUpdateRequestRegistryTypeEnum[keyof typeof RegistryUpdateRequestRegistryTypeEnum];


/**
 * Check if a given object implements the RegistryUpdateRequest interface.
 */
export function instanceOfRegistryUpdateRequest(value: object): value is RegistryUpdateRequest {
    if (!('registryId' in value) || value['registryId'] === undefined) return false;
    return true;
}

export function RegistryUpdateRequestFromJSON(json: any): RegistryUpdateRequest {
    return RegistryUpdateRequestFromJSONTyped(json, false);
}

export function RegistryUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistryUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'registryId': json['registryId'],
        'registryName': json['registryName'] == null ? undefined : json['registryName'],
        'imagePrefix': json['imagePrefix'] == null ? undefined : json['imagePrefix'],
        'username': json['username'] == null ? undefined : json['username'],
        'password': json['password'] == null ? undefined : json['password'],
        'registryUrl': json['registryUrl'] == null ? undefined : json['registryUrl'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'registryType': json['registryType'] == null ? undefined : json['registryType'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'serverId': json['serverId'] == null ? undefined : json['serverId'],
    };
}

export function RegistryUpdateRequestToJSON(json: any): RegistryUpdateRequest {
    return RegistryUpdateRequestToJSONTyped(json, false);
}

export function RegistryUpdateRequestToJSONTyped(value?: RegistryUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'registryId': value['registryId'],
        'registryName': value['registryName'],
        'imagePrefix': value['imagePrefix'],
        'username': value['username'],
        'password': value['password'],
        'registryUrl': value['registryUrl'],
        'createdAt': value['createdAt'],
        'registryType': value['registryType'],
        'organizationId': value['organizationId'],
        'serverId': value['serverId'],
    };
}

