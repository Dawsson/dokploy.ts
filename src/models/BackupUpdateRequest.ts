/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BackupUpdateRequest
 */
export interface BackupUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    schedule: string;
    /**
     * 
     * @type {boolean}
     * @memberof BackupUpdateRequest
     */
    enabled?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    prefix: string;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    backupId: string;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    destinationId: string;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    database: string;
    /**
     * 
     * @type {number}
     * @memberof BackupUpdateRequest
     */
    keepLatestCount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    serviceName: string | null;
    /**
     * 
     * @type {any}
     * @memberof BackupUpdateRequest
     */
    metadata?: any | null;
    /**
     * 
     * @type {string}
     * @memberof BackupUpdateRequest
     */
    databaseType: BackupUpdateRequestDatabaseTypeEnum;
}


/**
 * @export
 */
export const BackupUpdateRequestDatabaseTypeEnum = {
    Postgres: 'postgres',
    Mariadb: 'mariadb',
    Mysql: 'mysql',
    Mongo: 'mongo',
    WebServer: 'web-server'
} as const;
export type BackupUpdateRequestDatabaseTypeEnum = typeof BackupUpdateRequestDatabaseTypeEnum[keyof typeof BackupUpdateRequestDatabaseTypeEnum];


/**
 * Check if a given object implements the BackupUpdateRequest interface.
 */
export function instanceOfBackupUpdateRequest(value: object): value is BackupUpdateRequest {
    if (!('schedule' in value) || value['schedule'] === undefined) return false;
    if (!('prefix' in value) || value['prefix'] === undefined) return false;
    if (!('backupId' in value) || value['backupId'] === undefined) return false;
    if (!('destinationId' in value) || value['destinationId'] === undefined) return false;
    if (!('database' in value) || value['database'] === undefined) return false;
    if (!('serviceName' in value) || value['serviceName'] === undefined) return false;
    if (!('databaseType' in value) || value['databaseType'] === undefined) return false;
    return true;
}

export function BackupUpdateRequestFromJSON(json: any): BackupUpdateRequest {
    return BackupUpdateRequestFromJSONTyped(json, false);
}

export function BackupUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackupUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'schedule': json['schedule'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'prefix': json['prefix'],
        'backupId': json['backupId'],
        'destinationId': json['destinationId'],
        'database': json['database'],
        'keepLatestCount': json['keepLatestCount'] == null ? undefined : json['keepLatestCount'],
        'serviceName': json['serviceName'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'databaseType': json['databaseType'],
    };
}

export function BackupUpdateRequestToJSON(json: any): BackupUpdateRequest {
    return BackupUpdateRequestToJSONTyped(json, false);
}

export function BackupUpdateRequestToJSONTyped(value?: BackupUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schedule': value['schedule'],
        'enabled': value['enabled'],
        'prefix': value['prefix'],
        'backupId': value['backupId'],
        'destinationId': value['destinationId'],
        'database': value['database'],
        'keepLatestCount': value['keepLatestCount'],
        'serviceName': value['serviceName'],
        'metadata': value['metadata'],
        'databaseType': value['databaseType'],
    };
}

