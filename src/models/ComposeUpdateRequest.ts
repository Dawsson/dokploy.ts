/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComposeUpdateRequest
 */
export interface ComposeUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    composeId: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    appName?: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    env?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    composeFile?: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    refreshToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    sourceType?: ComposeUpdateRequestSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    composeType?: ComposeUpdateRequestComposeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    repository?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    owner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    branch?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ComposeUpdateRequest
     */
    autoDeploy?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ComposeUpdateRequest
     */
    gitlabProjectId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    gitlabRepository?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    gitlabOwner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    gitlabBranch?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    gitlabPathNamespace?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    bitbucketRepository?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    bitbucketOwner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    bitbucketBranch?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    giteaRepository?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    giteaOwner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    giteaBranch?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    customGitUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    customGitBranch?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    customGitSSHKeyId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    command?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ComposeUpdateRequest
     */
    enableSubmodules?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    composePath?: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    suffix?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ComposeUpdateRequest
     */
    randomize?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ComposeUpdateRequest
     */
    isolatedDeployment?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    triggerType?: ComposeUpdateRequestTriggerTypeEnum | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    composeStatus?: ComposeUpdateRequestComposeStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    createdAt?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ComposeUpdateRequest
     */
    watchPaths?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    githubId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    gitlabId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    bitbucketId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ComposeUpdateRequest
     */
    giteaId?: string | null;
}


/**
 * @export
 */
export const ComposeUpdateRequestSourceTypeEnum = {
    Git: 'git',
    Github: 'github',
    Gitlab: 'gitlab',
    Bitbucket: 'bitbucket',
    Gitea: 'gitea',
    Raw: 'raw'
} as const;
export type ComposeUpdateRequestSourceTypeEnum = typeof ComposeUpdateRequestSourceTypeEnum[keyof typeof ComposeUpdateRequestSourceTypeEnum];

/**
 * @export
 */
export const ComposeUpdateRequestComposeTypeEnum = {
    DockerCompose: 'docker-compose',
    Stack: 'stack'
} as const;
export type ComposeUpdateRequestComposeTypeEnum = typeof ComposeUpdateRequestComposeTypeEnum[keyof typeof ComposeUpdateRequestComposeTypeEnum];

/**
 * @export
 */
export const ComposeUpdateRequestTriggerTypeEnum = {
    Push: 'push',
    Tag: 'tag'
} as const;
export type ComposeUpdateRequestTriggerTypeEnum = typeof ComposeUpdateRequestTriggerTypeEnum[keyof typeof ComposeUpdateRequestTriggerTypeEnum];

/**
 * @export
 */
export const ComposeUpdateRequestComposeStatusEnum = {
    Idle: 'idle',
    Running: 'running',
    Done: 'done',
    Error: 'error'
} as const;
export type ComposeUpdateRequestComposeStatusEnum = typeof ComposeUpdateRequestComposeStatusEnum[keyof typeof ComposeUpdateRequestComposeStatusEnum];


/**
 * Check if a given object implements the ComposeUpdateRequest interface.
 */
export function instanceOfComposeUpdateRequest(value: object): value is ComposeUpdateRequest {
    if (!('composeId' in value) || value['composeId'] === undefined) return false;
    return true;
}

export function ComposeUpdateRequestFromJSON(json: any): ComposeUpdateRequest {
    return ComposeUpdateRequestFromJSONTyped(json, false);
}

export function ComposeUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComposeUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'composeId': json['composeId'],
        'name': json['name'] == null ? undefined : json['name'],
        'appName': json['appName'] == null ? undefined : json['appName'],
        'description': json['description'] == null ? undefined : json['description'],
        'env': json['env'] == null ? undefined : json['env'],
        'composeFile': json['composeFile'] == null ? undefined : json['composeFile'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'sourceType': json['sourceType'] == null ? undefined : json['sourceType'],
        'composeType': json['composeType'] == null ? undefined : json['composeType'],
        'repository': json['repository'] == null ? undefined : json['repository'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'branch': json['branch'] == null ? undefined : json['branch'],
        'autoDeploy': json['autoDeploy'] == null ? undefined : json['autoDeploy'],
        'gitlabProjectId': json['gitlabProjectId'] == null ? undefined : json['gitlabProjectId'],
        'gitlabRepository': json['gitlabRepository'] == null ? undefined : json['gitlabRepository'],
        'gitlabOwner': json['gitlabOwner'] == null ? undefined : json['gitlabOwner'],
        'gitlabBranch': json['gitlabBranch'] == null ? undefined : json['gitlabBranch'],
        'gitlabPathNamespace': json['gitlabPathNamespace'] == null ? undefined : json['gitlabPathNamespace'],
        'bitbucketRepository': json['bitbucketRepository'] == null ? undefined : json['bitbucketRepository'],
        'bitbucketOwner': json['bitbucketOwner'] == null ? undefined : json['bitbucketOwner'],
        'bitbucketBranch': json['bitbucketBranch'] == null ? undefined : json['bitbucketBranch'],
        'giteaRepository': json['giteaRepository'] == null ? undefined : json['giteaRepository'],
        'giteaOwner': json['giteaOwner'] == null ? undefined : json['giteaOwner'],
        'giteaBranch': json['giteaBranch'] == null ? undefined : json['giteaBranch'],
        'customGitUrl': json['customGitUrl'] == null ? undefined : json['customGitUrl'],
        'customGitBranch': json['customGitBranch'] == null ? undefined : json['customGitBranch'],
        'customGitSSHKeyId': json['customGitSSHKeyId'] == null ? undefined : json['customGitSSHKeyId'],
        'command': json['command'] == null ? undefined : json['command'],
        'enableSubmodules': json['enableSubmodules'] == null ? undefined : json['enableSubmodules'],
        'composePath': json['composePath'] == null ? undefined : json['composePath'],
        'suffix': json['suffix'] == null ? undefined : json['suffix'],
        'randomize': json['randomize'] == null ? undefined : json['randomize'],
        'isolatedDeployment': json['isolatedDeployment'] == null ? undefined : json['isolatedDeployment'],
        'triggerType': json['triggerType'] == null ? undefined : json['triggerType'],
        'composeStatus': json['composeStatus'] == null ? undefined : json['composeStatus'],
        'projectId': json['projectId'] == null ? undefined : json['projectId'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'watchPaths': json['watchPaths'] == null ? undefined : json['watchPaths'],
        'githubId': json['githubId'] == null ? undefined : json['githubId'],
        'gitlabId': json['gitlabId'] == null ? undefined : json['gitlabId'],
        'bitbucketId': json['bitbucketId'] == null ? undefined : json['bitbucketId'],
        'giteaId': json['giteaId'] == null ? undefined : json['giteaId'],
    };
}

export function ComposeUpdateRequestToJSON(json: any): ComposeUpdateRequest {
    return ComposeUpdateRequestToJSONTyped(json, false);
}

export function ComposeUpdateRequestToJSONTyped(value?: ComposeUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'composeId': value['composeId'],
        'name': value['name'],
        'appName': value['appName'],
        'description': value['description'],
        'env': value['env'],
        'composeFile': value['composeFile'],
        'refreshToken': value['refreshToken'],
        'sourceType': value['sourceType'],
        'composeType': value['composeType'],
        'repository': value['repository'],
        'owner': value['owner'],
        'branch': value['branch'],
        'autoDeploy': value['autoDeploy'],
        'gitlabProjectId': value['gitlabProjectId'],
        'gitlabRepository': value['gitlabRepository'],
        'gitlabOwner': value['gitlabOwner'],
        'gitlabBranch': value['gitlabBranch'],
        'gitlabPathNamespace': value['gitlabPathNamespace'],
        'bitbucketRepository': value['bitbucketRepository'],
        'bitbucketOwner': value['bitbucketOwner'],
        'bitbucketBranch': value['bitbucketBranch'],
        'giteaRepository': value['giteaRepository'],
        'giteaOwner': value['giteaOwner'],
        'giteaBranch': value['giteaBranch'],
        'customGitUrl': value['customGitUrl'],
        'customGitBranch': value['customGitBranch'],
        'customGitSSHKeyId': value['customGitSSHKeyId'],
        'command': value['command'],
        'enableSubmodules': value['enableSubmodules'],
        'composePath': value['composePath'],
        'suffix': value['suffix'],
        'randomize': value['randomize'],
        'isolatedDeployment': value['isolatedDeployment'],
        'triggerType': value['triggerType'],
        'composeStatus': value['composeStatus'],
        'projectId': value['projectId'],
        'createdAt': value['createdAt'],
        'watchPaths': value['watchPaths'],
        'githubId': value['githubId'],
        'gitlabId': value['gitlabId'],
        'bitbucketId': value['bitbucketId'],
        'giteaId': value['giteaId'],
    };
}

