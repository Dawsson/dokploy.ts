/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  ScheduleCreateRequest,
  ScheduleDeleteRequest,
  ScheduleRunManuallyRequest,
  ScheduleUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    ScheduleCreateRequestFromJSON,
    ScheduleCreateRequestToJSON,
    ScheduleDeleteRequestFromJSON,
    ScheduleDeleteRequestToJSON,
    ScheduleRunManuallyRequestFromJSON,
    ScheduleRunManuallyRequestToJSON,
    ScheduleUpdateRequestFromJSON,
    ScheduleUpdateRequestToJSON,
} from '../models/index';

export interface ScheduleCreateOperationRequest {
    scheduleCreateRequest: ScheduleCreateRequest;
}

export interface ScheduleDeleteOperationRequest {
    scheduleDeleteRequest: ScheduleDeleteRequest;
}

export interface ScheduleListRequest {
    id: string;
    scheduleType: ScheduleListScheduleTypeEnum;
}

export interface ScheduleOneRequest {
    scheduleId: string;
}

export interface ScheduleRunManuallyOperationRequest {
    scheduleRunManuallyRequest: ScheduleRunManuallyRequest;
}

export interface ScheduleUpdateOperationRequest {
    scheduleUpdateRequest: ScheduleUpdateRequest;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     */
    async scheduleCreateRaw(requestParameters: ScheduleCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduleCreateRequest',
                'Required parameter "scheduleCreateRequest" was null or undefined when calling scheduleCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleCreateRequestToJSON(requestParameters['scheduleCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleCreate(requestParameters: ScheduleCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async scheduleDeleteRaw(requestParameters: ScheduleDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduleDeleteRequest',
                'Required parameter "scheduleDeleteRequest" was null or undefined when calling scheduleDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleDeleteRequestToJSON(requestParameters['scheduleDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleDelete(requestParameters: ScheduleDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async scheduleListRaw(requestParameters: ScheduleListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scheduleList().'
            );
        }

        if (requestParameters['scheduleType'] == null) {
            throw new runtime.RequiredError(
                'scheduleType',
                'Required parameter "scheduleType" was null or undefined when calling scheduleList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['scheduleType'] != null) {
            queryParameters['scheduleType'] = requestParameters['scheduleType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleList(requestParameters: ScheduleListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async scheduleOneRaw(requestParameters: ScheduleOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling scheduleOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scheduleId'] != null) {
            queryParameters['scheduleId'] = requestParameters['scheduleId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleOne(requestParameters: ScheduleOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async scheduleRunManuallyRaw(requestParameters: ScheduleRunManuallyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleRunManuallyRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduleRunManuallyRequest',
                'Required parameter "scheduleRunManuallyRequest" was null or undefined when calling scheduleRunManually().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.runManually`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleRunManuallyRequestToJSON(requestParameters['scheduleRunManuallyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleRunManually(requestParameters: ScheduleRunManuallyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleRunManuallyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async scheduleUpdateRaw(requestParameters: ScheduleUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduleUpdateRequest',
                'Required parameter "scheduleUpdateRequest" was null or undefined when calling scheduleUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/schedule.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleUpdateRequestToJSON(requestParameters['scheduleUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scheduleUpdate(requestParameters: ScheduleUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleUpdateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ScheduleListScheduleTypeEnum = {
    Application: 'application',
    Compose: 'compose',
    Server: 'server',
    DokployServer: 'dokploy-server'
} as const;
export type ScheduleListScheduleTypeEnum = typeof ScheduleListScheduleTypeEnum[keyof typeof ScheduleListScheduleTypeEnum];
