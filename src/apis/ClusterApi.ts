/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClusterRemoveWorkerRequest,
  InlineObject,
} from '../models/index';
import {
    ClusterRemoveWorkerRequestFromJSON,
    ClusterRemoveWorkerRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface ClusterAddManagerRequest {
    serverId?: string;
}

export interface ClusterAddWorkerRequest {
    serverId?: string;
}

export interface ClusterGetNodesRequest {
    serverId?: string;
}

export interface ClusterRemoveWorkerOperationRequest {
    clusterRemoveWorkerRequest: ClusterRemoveWorkerRequest;
}

/**
 * 
 */
export class ClusterApi extends runtime.BaseAPI {

    /**
     */
    async clusterAddManagerRaw(requestParameters: ClusterAddManagerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/cluster.addManager`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterAddManager(requestParameters: ClusterAddManagerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clusterAddManagerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterAddWorkerRaw(requestParameters: ClusterAddWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/cluster.addWorker`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterAddWorker(requestParameters: ClusterAddWorkerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clusterAddWorkerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterGetNodesRaw(requestParameters: ClusterGetNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/cluster.getNodes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterGetNodes(requestParameters: ClusterGetNodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clusterGetNodesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterRemoveWorkerRaw(requestParameters: ClusterRemoveWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['clusterRemoveWorkerRequest'] == null) {
            throw new runtime.RequiredError(
                'clusterRemoveWorkerRequest',
                'Required parameter "clusterRemoveWorkerRequest" was null or undefined when calling clusterRemoveWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/cluster.removeWorker`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClusterRemoveWorkerRequestToJSON(requestParameters['clusterRemoveWorkerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterRemoveWorker(requestParameters: ClusterRemoveWorkerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clusterRemoveWorkerRaw(requestParameters, initOverrides);
    }

}
