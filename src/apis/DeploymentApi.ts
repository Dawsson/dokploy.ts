/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface DeploymentAllRequest {
    applicationId: string;
}

export interface DeploymentAllByComposeRequest {
    composeId: string;
}

export interface DeploymentAllByServerRequest {
    serverId: string;
}

export interface DeploymentAllByTypeRequest {
    id: string;
    type: DeploymentAllByTypeTypeEnum;
}

/**
 * 
 */
export class DeploymentApi extends runtime.BaseAPI {

    /**
     */
    async deploymentAllRaw(requestParameters: DeploymentAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling deploymentAll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/deployment.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentAll(requestParameters: DeploymentAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deploymentAllByComposeRaw(requestParameters: DeploymentAllByComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeId'] == null) {
            throw new runtime.RequiredError(
                'composeId',
                'Required parameter "composeId" was null or undefined when calling deploymentAllByCompose().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['composeId'] != null) {
            queryParameters['composeId'] = requestParameters['composeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/deployment.allByCompose`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentAllByCompose(requestParameters: DeploymentAllByComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentAllByComposeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deploymentAllByServerRaw(requestParameters: DeploymentAllByServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling deploymentAllByServer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/deployment.allByServer`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentAllByServer(requestParameters: DeploymentAllByServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentAllByServerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deploymentAllByTypeRaw(requestParameters: DeploymentAllByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deploymentAllByType().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling deploymentAllByType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/deployment.allByType`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deploymentAllByType(requestParameters: DeploymentAllByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deploymentAllByTypeRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const DeploymentAllByTypeTypeEnum = {
    Application: 'application',
    Compose: 'compose',
    Server: 'server',
    Schedule: 'schedule',
    PreviewDeployment: 'previewDeployment',
    Backup: 'backup'
} as const;
export type DeploymentAllByTypeTypeEnum = typeof DeploymentAllByTypeTypeEnum[keyof typeof DeploymentAllByTypeTypeEnum];
