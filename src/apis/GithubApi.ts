/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GithubTestConnectionRequest,
  GithubUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    GithubTestConnectionRequestFromJSON,
    GithubTestConnectionRequestToJSON,
    GithubUpdateRequestFromJSON,
    GithubUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface GithubGetGithubBranchesRequest {
    repo: string;
    owner: string;
    githubId?: string;
}

export interface GithubGetGithubRepositoriesRequest {
    githubId: string;
}

export interface GithubOneRequest {
    githubId: string;
}

export interface GithubTestConnectionOperationRequest {
    githubTestConnectionRequest: GithubTestConnectionRequest;
}

export interface GithubUpdateOperationRequest {
    githubUpdateRequest: GithubUpdateRequest;
}

/**
 * 
 */
export class GithubApi extends runtime.BaseAPI {

    /**
     */
    async githubGetGithubBranchesRaw(requestParameters: GithubGetGithubBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['repo'] == null) {
            throw new runtime.RequiredError(
                'repo',
                'Required parameter "repo" was null or undefined when calling githubGetGithubBranches().'
            );
        }

        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling githubGetGithubBranches().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['repo'] != null) {
            queryParameters['repo'] = requestParameters['repo'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['githubId'] != null) {
            queryParameters['githubId'] = requestParameters['githubId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.getGithubBranches`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubGetGithubBranches(requestParameters: GithubGetGithubBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubGetGithubBranchesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubGetGithubRepositoriesRaw(requestParameters: GithubGetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubId'] == null) {
            throw new runtime.RequiredError(
                'githubId',
                'Required parameter "githubId" was null or undefined when calling githubGetGithubRepositories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['githubId'] != null) {
            queryParameters['githubId'] = requestParameters['githubId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.getGithubRepositories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubGetGithubRepositories(requestParameters: GithubGetGithubRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubGetGithubRepositoriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubGithubProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.githubProviders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubGithubProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubGithubProvidersRaw(initOverrides);
    }

    /**
     */
    async githubOneRaw(requestParameters: GithubOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubId'] == null) {
            throw new runtime.RequiredError(
                'githubId',
                'Required parameter "githubId" was null or undefined when calling githubOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['githubId'] != null) {
            queryParameters['githubId'] = requestParameters['githubId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubOne(requestParameters: GithubOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubTestConnectionRaw(requestParameters: GithubTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubTestConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'githubTestConnectionRequest',
                'Required parameter "githubTestConnectionRequest" was null or undefined when calling githubTestConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.testConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubTestConnectionRequestToJSON(requestParameters['githubTestConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubTestConnection(requestParameters: GithubTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubTestConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async githubUpdateRaw(requestParameters: GithubUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['githubUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'githubUpdateRequest',
                'Required parameter "githubUpdateRequest" was null or undefined when calling githubUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/github.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GithubUpdateRequestToJSON(requestParameters['githubUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async githubUpdate(requestParameters: GithubUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.githubUpdateRaw(requestParameters, initOverrides);
    }

}
