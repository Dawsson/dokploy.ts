/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  MysqlChangeStatusRequest,
  MysqlCreateRequest,
  MysqlMoveRequest,
  MysqlReloadRequest,
  MysqlSaveEnvironmentRequest,
  MysqlSaveExternalPortRequest,
  MysqlStartRequest,
  MysqlUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    MysqlChangeStatusRequestFromJSON,
    MysqlChangeStatusRequestToJSON,
    MysqlCreateRequestFromJSON,
    MysqlCreateRequestToJSON,
    MysqlMoveRequestFromJSON,
    MysqlMoveRequestToJSON,
    MysqlReloadRequestFromJSON,
    MysqlReloadRequestToJSON,
    MysqlSaveEnvironmentRequestFromJSON,
    MysqlSaveEnvironmentRequestToJSON,
    MysqlSaveExternalPortRequestFromJSON,
    MysqlSaveExternalPortRequestToJSON,
    MysqlStartRequestFromJSON,
    MysqlStartRequestToJSON,
    MysqlUpdateRequestFromJSON,
    MysqlUpdateRequestToJSON,
} from '../models/index';

export interface MysqlChangeStatusOperationRequest {
    mysqlChangeStatusRequest: MysqlChangeStatusRequest;
}

export interface MysqlCreateOperationRequest {
    mysqlCreateRequest: MysqlCreateRequest;
}

export interface MysqlDeployRequest {
    mysqlStartRequest: MysqlStartRequest;
}

export interface MysqlMoveOperationRequest {
    mysqlMoveRequest: MysqlMoveRequest;
}

export interface MysqlOneRequest {
    mysqlId: string;
}

export interface MysqlRebuildRequest {
    mysqlStartRequest: MysqlStartRequest;
}

export interface MysqlReloadOperationRequest {
    mysqlReloadRequest: MysqlReloadRequest;
}

export interface MysqlRemoveRequest {
    mysqlStartRequest: MysqlStartRequest;
}

export interface MysqlSaveEnvironmentOperationRequest {
    mysqlSaveEnvironmentRequest: MysqlSaveEnvironmentRequest;
}

export interface MysqlSaveExternalPortOperationRequest {
    mysqlSaveExternalPortRequest: MysqlSaveExternalPortRequest;
}

export interface MysqlStartOperationRequest {
    mysqlStartRequest: MysqlStartRequest;
}

export interface MysqlStopRequest {
    mysqlStartRequest: MysqlStartRequest;
}

export interface MysqlUpdateOperationRequest {
    mysqlUpdateRequest: MysqlUpdateRequest;
}

/**
 * 
 */
export class MysqlApi extends runtime.BaseAPI {

    /**
     */
    async mysqlChangeStatusRaw(requestParameters: MysqlChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlChangeStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlChangeStatusRequest',
                'Required parameter "mysqlChangeStatusRequest" was null or undefined when calling mysqlChangeStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.changeStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlChangeStatusRequestToJSON(requestParameters['mysqlChangeStatusRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlChangeStatus(requestParameters: MysqlChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlChangeStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlCreateRaw(requestParameters: MysqlCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlCreateRequest',
                'Required parameter "mysqlCreateRequest" was null or undefined when calling mysqlCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlCreateRequestToJSON(requestParameters['mysqlCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlCreate(requestParameters: MysqlCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlDeployRaw(requestParameters: MysqlDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlStartRequest',
                'Required parameter "mysqlStartRequest" was null or undefined when calling mysqlDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlStartRequestToJSON(requestParameters['mysqlStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlDeploy(requestParameters: MysqlDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlMoveRaw(requestParameters: MysqlMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlMoveRequest',
                'Required parameter "mysqlMoveRequest" was null or undefined when calling mysqlMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlMoveRequestToJSON(requestParameters['mysqlMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlMove(requestParameters: MysqlMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlOneRaw(requestParameters: MysqlOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlId'] == null) {
            throw new runtime.RequiredError(
                'mysqlId',
                'Required parameter "mysqlId" was null or undefined when calling mysqlOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mysqlId'] != null) {
            queryParameters['mysqlId'] = requestParameters['mysqlId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlOne(requestParameters: MysqlOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlRebuildRaw(requestParameters: MysqlRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlStartRequest',
                'Required parameter "mysqlStartRequest" was null or undefined when calling mysqlRebuild().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.rebuild`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlStartRequestToJSON(requestParameters['mysqlStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlRebuild(requestParameters: MysqlRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlRebuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlReloadRaw(requestParameters: MysqlReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlReloadRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlReloadRequest',
                'Required parameter "mysqlReloadRequest" was null or undefined when calling mysqlReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.reload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlReloadRequestToJSON(requestParameters['mysqlReloadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlReload(requestParameters: MysqlReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlReloadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlRemoveRaw(requestParameters: MysqlRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlStartRequest',
                'Required parameter "mysqlStartRequest" was null or undefined when calling mysqlRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlStartRequestToJSON(requestParameters['mysqlStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlRemove(requestParameters: MysqlRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlSaveEnvironmentRaw(requestParameters: MysqlSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlSaveEnvironmentRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlSaveEnvironmentRequest',
                'Required parameter "mysqlSaveEnvironmentRequest" was null or undefined when calling mysqlSaveEnvironment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.saveEnvironment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlSaveEnvironmentRequestToJSON(requestParameters['mysqlSaveEnvironmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlSaveEnvironment(requestParameters: MysqlSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlSaveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlSaveExternalPortRaw(requestParameters: MysqlSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlSaveExternalPortRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlSaveExternalPortRequest',
                'Required parameter "mysqlSaveExternalPortRequest" was null or undefined when calling mysqlSaveExternalPort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.saveExternalPort`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlSaveExternalPortRequestToJSON(requestParameters['mysqlSaveExternalPortRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlSaveExternalPort(requestParameters: MysqlSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlSaveExternalPortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlStartRaw(requestParameters: MysqlStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlStartRequest',
                'Required parameter "mysqlStartRequest" was null or undefined when calling mysqlStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlStartRequestToJSON(requestParameters['mysqlStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlStart(requestParameters: MysqlStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlStopRaw(requestParameters: MysqlStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlStartRequest',
                'Required parameter "mysqlStartRequest" was null or undefined when calling mysqlStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlStartRequestToJSON(requestParameters['mysqlStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlStop(requestParameters: MysqlStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mysqlUpdateRaw(requestParameters: MysqlUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mysqlUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'mysqlUpdateRequest',
                'Required parameter "mysqlUpdateRequest" was null or undefined when calling mysqlUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mysql.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MysqlUpdateRequestToJSON(requestParameters['mysqlUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mysqlUpdate(requestParameters: MysqlUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mysqlUpdateRaw(requestParameters, initOverrides);
    }

}
