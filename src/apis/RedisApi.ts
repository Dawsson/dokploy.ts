/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  RedisChangeStatusRequest,
  RedisCreateRequest,
  RedisMoveRequest,
  RedisReloadRequest,
  RedisSaveEnvironmentRequest,
  RedisSaveExternalPortRequest,
  RedisStartRequest,
  RedisUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RedisChangeStatusRequestFromJSON,
    RedisChangeStatusRequestToJSON,
    RedisCreateRequestFromJSON,
    RedisCreateRequestToJSON,
    RedisMoveRequestFromJSON,
    RedisMoveRequestToJSON,
    RedisReloadRequestFromJSON,
    RedisReloadRequestToJSON,
    RedisSaveEnvironmentRequestFromJSON,
    RedisSaveEnvironmentRequestToJSON,
    RedisSaveExternalPortRequestFromJSON,
    RedisSaveExternalPortRequestToJSON,
    RedisStartRequestFromJSON,
    RedisStartRequestToJSON,
    RedisUpdateRequestFromJSON,
    RedisUpdateRequestToJSON,
} from '../models/index';

export interface RedisChangeStatusOperationRequest {
    redisChangeStatusRequest: RedisChangeStatusRequest;
}

export interface RedisCreateOperationRequest {
    redisCreateRequest: RedisCreateRequest;
}

export interface RedisDeployRequest {
    redisStartRequest: RedisStartRequest;
}

export interface RedisMoveOperationRequest {
    redisMoveRequest: RedisMoveRequest;
}

export interface RedisOneRequest {
    redisId: string;
}

export interface RedisRebuildRequest {
    redisStartRequest: RedisStartRequest;
}

export interface RedisReloadOperationRequest {
    redisReloadRequest: RedisReloadRequest;
}

export interface RedisRemoveRequest {
    redisStartRequest: RedisStartRequest;
}

export interface RedisSaveEnvironmentOperationRequest {
    redisSaveEnvironmentRequest: RedisSaveEnvironmentRequest;
}

export interface RedisSaveExternalPortOperationRequest {
    redisSaveExternalPortRequest: RedisSaveExternalPortRequest;
}

export interface RedisStartOperationRequest {
    redisStartRequest: RedisStartRequest;
}

export interface RedisStopRequest {
    redisStartRequest: RedisStartRequest;
}

export interface RedisUpdateOperationRequest {
    redisUpdateRequest: RedisUpdateRequest;
}

/**
 * 
 */
export class RedisApi extends runtime.BaseAPI {

    /**
     */
    async redisChangeStatusRaw(requestParameters: RedisChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisChangeStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'redisChangeStatusRequest',
                'Required parameter "redisChangeStatusRequest" was null or undefined when calling redisChangeStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.changeStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisChangeStatusRequestToJSON(requestParameters['redisChangeStatusRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisChangeStatus(requestParameters: RedisChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisChangeStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisCreateRaw(requestParameters: RedisCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'redisCreateRequest',
                'Required parameter "redisCreateRequest" was null or undefined when calling redisCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisCreateRequestToJSON(requestParameters['redisCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisCreate(requestParameters: RedisCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisDeployRaw(requestParameters: RedisDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisStartRequest'] == null) {
            throw new runtime.RequiredError(
                'redisStartRequest',
                'Required parameter "redisStartRequest" was null or undefined when calling redisDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisStartRequestToJSON(requestParameters['redisStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisDeploy(requestParameters: RedisDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisMoveRaw(requestParameters: RedisMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'redisMoveRequest',
                'Required parameter "redisMoveRequest" was null or undefined when calling redisMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisMoveRequestToJSON(requestParameters['redisMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisMove(requestParameters: RedisMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisOneRaw(requestParameters: RedisOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisId'] == null) {
            throw new runtime.RequiredError(
                'redisId',
                'Required parameter "redisId" was null or undefined when calling redisOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['redisId'] != null) {
            queryParameters['redisId'] = requestParameters['redisId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisOne(requestParameters: RedisOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisRebuildRaw(requestParameters: RedisRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisStartRequest'] == null) {
            throw new runtime.RequiredError(
                'redisStartRequest',
                'Required parameter "redisStartRequest" was null or undefined when calling redisRebuild().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.rebuild`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisStartRequestToJSON(requestParameters['redisStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisRebuild(requestParameters: RedisRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisRebuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisReloadRaw(requestParameters: RedisReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisReloadRequest'] == null) {
            throw new runtime.RequiredError(
                'redisReloadRequest',
                'Required parameter "redisReloadRequest" was null or undefined when calling redisReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.reload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisReloadRequestToJSON(requestParameters['redisReloadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisReload(requestParameters: RedisReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisReloadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisRemoveRaw(requestParameters: RedisRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisStartRequest'] == null) {
            throw new runtime.RequiredError(
                'redisStartRequest',
                'Required parameter "redisStartRequest" was null or undefined when calling redisRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisStartRequestToJSON(requestParameters['redisStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisRemove(requestParameters: RedisRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisSaveEnvironmentRaw(requestParameters: RedisSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisSaveEnvironmentRequest'] == null) {
            throw new runtime.RequiredError(
                'redisSaveEnvironmentRequest',
                'Required parameter "redisSaveEnvironmentRequest" was null or undefined when calling redisSaveEnvironment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.saveEnvironment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisSaveEnvironmentRequestToJSON(requestParameters['redisSaveEnvironmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisSaveEnvironment(requestParameters: RedisSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisSaveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisSaveExternalPortRaw(requestParameters: RedisSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisSaveExternalPortRequest'] == null) {
            throw new runtime.RequiredError(
                'redisSaveExternalPortRequest',
                'Required parameter "redisSaveExternalPortRequest" was null or undefined when calling redisSaveExternalPort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.saveExternalPort`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisSaveExternalPortRequestToJSON(requestParameters['redisSaveExternalPortRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisSaveExternalPort(requestParameters: RedisSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisSaveExternalPortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisStartRaw(requestParameters: RedisStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisStartRequest'] == null) {
            throw new runtime.RequiredError(
                'redisStartRequest',
                'Required parameter "redisStartRequest" was null or undefined when calling redisStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisStartRequestToJSON(requestParameters['redisStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisStart(requestParameters: RedisStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisStopRaw(requestParameters: RedisStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisStartRequest'] == null) {
            throw new runtime.RequiredError(
                'redisStartRequest',
                'Required parameter "redisStartRequest" was null or undefined when calling redisStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisStartRequestToJSON(requestParameters['redisStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisStop(requestParameters: RedisStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redisUpdateRaw(requestParameters: RedisUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redisUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'redisUpdateRequest',
                'Required parameter "redisUpdateRequest" was null or undefined when calling redisUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redis.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedisUpdateRequestToJSON(requestParameters['redisUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redisUpdate(requestParameters: RedisUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redisUpdateRaw(requestParameters, initOverrides);
    }

}
