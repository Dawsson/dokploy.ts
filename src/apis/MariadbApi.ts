/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  MariadbChangeStatusRequest,
  MariadbCreateRequest,
  MariadbMoveRequest,
  MariadbReloadRequest,
  MariadbSaveEnvironmentRequest,
  MariadbSaveExternalPortRequest,
  MariadbStartRequest,
  MariadbUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    MariadbChangeStatusRequestFromJSON,
    MariadbChangeStatusRequestToJSON,
    MariadbCreateRequestFromJSON,
    MariadbCreateRequestToJSON,
    MariadbMoveRequestFromJSON,
    MariadbMoveRequestToJSON,
    MariadbReloadRequestFromJSON,
    MariadbReloadRequestToJSON,
    MariadbSaveEnvironmentRequestFromJSON,
    MariadbSaveEnvironmentRequestToJSON,
    MariadbSaveExternalPortRequestFromJSON,
    MariadbSaveExternalPortRequestToJSON,
    MariadbStartRequestFromJSON,
    MariadbStartRequestToJSON,
    MariadbUpdateRequestFromJSON,
    MariadbUpdateRequestToJSON,
} from '../models/index';

export interface MariadbChangeStatusOperationRequest {
    mariadbChangeStatusRequest: MariadbChangeStatusRequest;
}

export interface MariadbCreateOperationRequest {
    mariadbCreateRequest: MariadbCreateRequest;
}

export interface MariadbDeployRequest {
    mariadbStartRequest: MariadbStartRequest;
}

export interface MariadbMoveOperationRequest {
    mariadbMoveRequest: MariadbMoveRequest;
}

export interface MariadbOneRequest {
    mariadbId: string;
}

export interface MariadbRebuildRequest {
    mariadbStartRequest: MariadbStartRequest;
}

export interface MariadbReloadOperationRequest {
    mariadbReloadRequest: MariadbReloadRequest;
}

export interface MariadbRemoveRequest {
    mariadbStartRequest: MariadbStartRequest;
}

export interface MariadbSaveEnvironmentOperationRequest {
    mariadbSaveEnvironmentRequest: MariadbSaveEnvironmentRequest;
}

export interface MariadbSaveExternalPortOperationRequest {
    mariadbSaveExternalPortRequest: MariadbSaveExternalPortRequest;
}

export interface MariadbStartOperationRequest {
    mariadbStartRequest: MariadbStartRequest;
}

export interface MariadbStopRequest {
    mariadbStartRequest: MariadbStartRequest;
}

export interface MariadbUpdateOperationRequest {
    mariadbUpdateRequest: MariadbUpdateRequest;
}

/**
 * 
 */
export class MariadbApi extends runtime.BaseAPI {

    /**
     */
    async mariadbChangeStatusRaw(requestParameters: MariadbChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbChangeStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbChangeStatusRequest',
                'Required parameter "mariadbChangeStatusRequest" was null or undefined when calling mariadbChangeStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.changeStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbChangeStatusRequestToJSON(requestParameters['mariadbChangeStatusRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbChangeStatus(requestParameters: MariadbChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbChangeStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbCreateRaw(requestParameters: MariadbCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbCreateRequest',
                'Required parameter "mariadbCreateRequest" was null or undefined when calling mariadbCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbCreateRequestToJSON(requestParameters['mariadbCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbCreate(requestParameters: MariadbCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbDeployRaw(requestParameters: MariadbDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbStartRequest',
                'Required parameter "mariadbStartRequest" was null or undefined when calling mariadbDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbStartRequestToJSON(requestParameters['mariadbStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbDeploy(requestParameters: MariadbDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbMoveRaw(requestParameters: MariadbMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbMoveRequest',
                'Required parameter "mariadbMoveRequest" was null or undefined when calling mariadbMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbMoveRequestToJSON(requestParameters['mariadbMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbMove(requestParameters: MariadbMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbOneRaw(requestParameters: MariadbOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbId'] == null) {
            throw new runtime.RequiredError(
                'mariadbId',
                'Required parameter "mariadbId" was null or undefined when calling mariadbOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mariadbId'] != null) {
            queryParameters['mariadbId'] = requestParameters['mariadbId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbOne(requestParameters: MariadbOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbRebuildRaw(requestParameters: MariadbRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbStartRequest',
                'Required parameter "mariadbStartRequest" was null or undefined when calling mariadbRebuild().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.rebuild`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbStartRequestToJSON(requestParameters['mariadbStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbRebuild(requestParameters: MariadbRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbRebuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbReloadRaw(requestParameters: MariadbReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbReloadRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbReloadRequest',
                'Required parameter "mariadbReloadRequest" was null or undefined when calling mariadbReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.reload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbReloadRequestToJSON(requestParameters['mariadbReloadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbReload(requestParameters: MariadbReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbReloadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbRemoveRaw(requestParameters: MariadbRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbStartRequest',
                'Required parameter "mariadbStartRequest" was null or undefined when calling mariadbRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbStartRequestToJSON(requestParameters['mariadbStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbRemove(requestParameters: MariadbRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbSaveEnvironmentRaw(requestParameters: MariadbSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbSaveEnvironmentRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbSaveEnvironmentRequest',
                'Required parameter "mariadbSaveEnvironmentRequest" was null or undefined when calling mariadbSaveEnvironment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.saveEnvironment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbSaveEnvironmentRequestToJSON(requestParameters['mariadbSaveEnvironmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbSaveEnvironment(requestParameters: MariadbSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbSaveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbSaveExternalPortRaw(requestParameters: MariadbSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbSaveExternalPortRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbSaveExternalPortRequest',
                'Required parameter "mariadbSaveExternalPortRequest" was null or undefined when calling mariadbSaveExternalPort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.saveExternalPort`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbSaveExternalPortRequestToJSON(requestParameters['mariadbSaveExternalPortRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbSaveExternalPort(requestParameters: MariadbSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbSaveExternalPortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbStartRaw(requestParameters: MariadbStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbStartRequest',
                'Required parameter "mariadbStartRequest" was null or undefined when calling mariadbStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbStartRequestToJSON(requestParameters['mariadbStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbStart(requestParameters: MariadbStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbStopRaw(requestParameters: MariadbStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbStartRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbStartRequest',
                'Required parameter "mariadbStartRequest" was null or undefined when calling mariadbStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbStartRequestToJSON(requestParameters['mariadbStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbStop(requestParameters: MariadbStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mariadbUpdateRaw(requestParameters: MariadbUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mariadbUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'mariadbUpdateRequest',
                'Required parameter "mariadbUpdateRequest" was null or undefined when calling mariadbUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mariadb.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MariadbUpdateRequestToJSON(requestParameters['mariadbUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mariadbUpdate(requestParameters: MariadbUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mariadbUpdateRaw(requestParameters, initOverrides);
    }

}
