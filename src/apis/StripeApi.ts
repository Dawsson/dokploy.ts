/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  StripeCreateCheckoutSessionRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    StripeCreateCheckoutSessionRequestFromJSON,
    StripeCreateCheckoutSessionRequestToJSON,
} from '../models/index';

export interface StripeCreateCheckoutSessionOperationRequest {
    stripeCreateCheckoutSessionRequest: StripeCreateCheckoutSessionRequest;
}

/**
 * 
 */
export class StripeApi extends runtime.BaseAPI {

    /**
     */
    async stripeCanCreateMoreServersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/stripe.canCreateMoreServers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stripeCanCreateMoreServers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stripeCanCreateMoreServersRaw(initOverrides);
    }

    /**
     */
    async stripeCreateCheckoutSessionRaw(requestParameters: StripeCreateCheckoutSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['stripeCreateCheckoutSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'stripeCreateCheckoutSessionRequest',
                'Required parameter "stripeCreateCheckoutSessionRequest" was null or undefined when calling stripeCreateCheckoutSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/stripe.createCheckoutSession`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StripeCreateCheckoutSessionRequestToJSON(requestParameters['stripeCreateCheckoutSessionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stripeCreateCheckoutSession(requestParameters: StripeCreateCheckoutSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stripeCreateCheckoutSessionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async stripeCreateCustomerPortalSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/stripe.createCustomerPortalSession`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stripeCreateCustomerPortalSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stripeCreateCustomerPortalSessionRaw(initOverrides);
    }

    /**
     */
    async stripeGetProductsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/stripe.getProducts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async stripeGetProducts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stripeGetProductsRaw(initOverrides);
    }

}
