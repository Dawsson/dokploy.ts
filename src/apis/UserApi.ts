/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  UserAssignPermissionsRequest,
  UserCreateApiKeyRequest,
  UserDeleteApiKeyRequest,
  UserRemoveRequest,
  UserUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    UserAssignPermissionsRequestFromJSON,
    UserAssignPermissionsRequestToJSON,
    UserCreateApiKeyRequestFromJSON,
    UserCreateApiKeyRequestToJSON,
    UserDeleteApiKeyRequestFromJSON,
    UserDeleteApiKeyRequestToJSON,
    UserRemoveRequestFromJSON,
    UserRemoveRequestToJSON,
    UserUpdateRequestFromJSON,
    UserUpdateRequestToJSON,
} from '../models/index';

export interface UserAssignPermissionsOperationRequest {
    userAssignPermissionsRequest: UserAssignPermissionsRequest;
}

export interface UserCheckUserOrganizationsRequest {
    userId: string;
}

export interface UserCreateApiKeyOperationRequest {
    userCreateApiKeyRequest: UserCreateApiKeyRequest;
}

export interface UserDeleteApiKeyOperationRequest {
    userDeleteApiKeyRequest: UserDeleteApiKeyRequest;
}

export interface UserGetContainerMetricsRequest {
    url: string;
    token: string;
    appName: string;
    dataPoints: string;
}

export interface UserGetUserByTokenRequest {
    token: string;
}

export interface UserOneRequest {
    userId: string;
}

export interface UserRemoveOperationRequest {
    userRemoveRequest: UserRemoveRequest;
}

export interface UserUpdateOperationRequest {
    userUpdateRequest: UserUpdateRequest;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async userAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userAllRaw(initOverrides);
    }

    /**
     */
    async userAssignPermissionsRaw(requestParameters: UserAssignPermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userAssignPermissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'userAssignPermissionsRequest',
                'Required parameter "userAssignPermissionsRequest" was null or undefined when calling userAssignPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.assignPermissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAssignPermissionsRequestToJSON(requestParameters['userAssignPermissionsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userAssignPermissions(requestParameters: UserAssignPermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userAssignPermissionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userCheckUserOrganizationsRaw(requestParameters: UserCheckUserOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userCheckUserOrganizations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.checkUserOrganizations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userCheckUserOrganizations(requestParameters: UserCheckUserOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userCheckUserOrganizationsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userCreateApiKeyRaw(requestParameters: UserCreateApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userCreateApiKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'userCreateApiKeyRequest',
                'Required parameter "userCreateApiKeyRequest" was null or undefined when calling userCreateApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.createApiKey`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateApiKeyRequestToJSON(requestParameters['userCreateApiKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userCreateApiKey(requestParameters: UserCreateApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userCreateApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userDeleteApiKeyRaw(requestParameters: UserDeleteApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userDeleteApiKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'userDeleteApiKeyRequest',
                'Required parameter "userDeleteApiKeyRequest" was null or undefined when calling userDeleteApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.deleteApiKey`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDeleteApiKeyRequestToJSON(requestParameters['userDeleteApiKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userDeleteApiKey(requestParameters: UserDeleteApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userDeleteApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userGenerateTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.generateToken`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGenerateToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGenerateTokenRaw(initOverrides);
    }

    /**
     */
    async userGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetRaw(initOverrides);
    }

    /**
     */
    async userGetBackupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getBackups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetBackups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetBackupsRaw(initOverrides);
    }

    /**
     */
    async userGetContainerMetricsRaw(requestParameters: UserGetContainerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling userGetContainerMetrics().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling userGetContainerMetrics().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling userGetContainerMetrics().'
            );
        }

        if (requestParameters['dataPoints'] == null) {
            throw new runtime.RequiredError(
                'dataPoints',
                'Required parameter "dataPoints" was null or undefined when calling userGetContainerMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['dataPoints'] != null) {
            queryParameters['dataPoints'] = requestParameters['dataPoints'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getContainerMetrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetContainerMetrics(requestParameters: UserGetContainerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetContainerMetricsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userGetInvitationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getInvitations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetInvitations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetInvitationsRaw(initOverrides);
    }

    /**
     */
    async userGetMetricsTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getMetricsToken`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetMetricsToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetMetricsTokenRaw(initOverrides);
    }

    /**
     */
    async userGetServerMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getServerMetrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetServerMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetServerMetricsRaw(initOverrides);
    }

    /**
     */
    async userGetUserByTokenRaw(requestParameters: UserGetUserByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling userGetUserByToken().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.getUserByToken`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userGetUserByToken(requestParameters: UserGetUserByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userGetUserByTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userHaveRootAccessRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.haveRootAccess`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userHaveRootAccess(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userHaveRootAccessRaw(initOverrides);
    }

    /**
     */
    async userOneRaw(requestParameters: UserOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userOne(requestParameters: UserOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userRemoveRaw(requestParameters: UserRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'userRemoveRequest',
                'Required parameter "userRemoveRequest" was null or undefined when calling userRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRemoveRequestToJSON(requestParameters['userRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userRemove(requestParameters: UserRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userUpdateRaw(requestParameters: UserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'userUpdateRequest',
                'Required parameter "userUpdateRequest" was null or undefined when calling userUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/user.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateRequestToJSON(requestParameters['userUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userUpdate(requestParameters: UserUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userUpdateRaw(requestParameters, initOverrides);
    }

}
