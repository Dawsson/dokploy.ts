/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GiteaCreateRequest,
  GiteaTestConnectionRequest,
  GiteaUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    GiteaCreateRequestFromJSON,
    GiteaCreateRequestToJSON,
    GiteaTestConnectionRequestFromJSON,
    GiteaTestConnectionRequestToJSON,
    GiteaUpdateRequestFromJSON,
    GiteaUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface GiteaCreateOperationRequest {
    giteaCreateRequest: GiteaCreateRequest;
}

export interface GiteaGetGiteaBranchesRequest {
    owner: string;
    repositoryName: string;
    giteaId?: string;
}

export interface GiteaGetGiteaRepositoriesRequest {
    giteaId: string;
}

export interface GiteaGetGiteaUrlRequest {
    giteaId: string;
}

export interface GiteaOneRequest {
    giteaId: string;
}

export interface GiteaTestConnectionOperationRequest {
    giteaTestConnectionRequest: GiteaTestConnectionRequest;
}

export interface GiteaUpdateOperationRequest {
    giteaUpdateRequest: GiteaUpdateRequest;
}

/**
 * 
 */
export class GiteaApi extends runtime.BaseAPI {

    /**
     */
    async giteaCreateRaw(requestParameters: GiteaCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'giteaCreateRequest',
                'Required parameter "giteaCreateRequest" was null or undefined when calling giteaCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiteaCreateRequestToJSON(requestParameters['giteaCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaCreate(requestParameters: GiteaCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaGetGiteaBranchesRaw(requestParameters: GiteaGetGiteaBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling giteaGetGiteaBranches().'
            );
        }

        if (requestParameters['repositoryName'] == null) {
            throw new runtime.RequiredError(
                'repositoryName',
                'Required parameter "repositoryName" was null or undefined when calling giteaGetGiteaBranches().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['repositoryName'] != null) {
            queryParameters['repositoryName'] = requestParameters['repositoryName'];
        }

        if (requestParameters['giteaId'] != null) {
            queryParameters['giteaId'] = requestParameters['giteaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.getGiteaBranches`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaGetGiteaBranches(requestParameters: GiteaGetGiteaBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaGetGiteaBranchesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaGetGiteaRepositoriesRaw(requestParameters: GiteaGetGiteaRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaId'] == null) {
            throw new runtime.RequiredError(
                'giteaId',
                'Required parameter "giteaId" was null or undefined when calling giteaGetGiteaRepositories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['giteaId'] != null) {
            queryParameters['giteaId'] = requestParameters['giteaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.getGiteaRepositories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaGetGiteaRepositories(requestParameters: GiteaGetGiteaRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaGetGiteaRepositoriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaGetGiteaUrlRaw(requestParameters: GiteaGetGiteaUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaId'] == null) {
            throw new runtime.RequiredError(
                'giteaId',
                'Required parameter "giteaId" was null or undefined when calling giteaGetGiteaUrl().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['giteaId'] != null) {
            queryParameters['giteaId'] = requestParameters['giteaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.getGiteaUrl`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaGetGiteaUrl(requestParameters: GiteaGetGiteaUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaGetGiteaUrlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaGiteaProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.giteaProviders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaGiteaProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaGiteaProvidersRaw(initOverrides);
    }

    /**
     */
    async giteaOneRaw(requestParameters: GiteaOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaId'] == null) {
            throw new runtime.RequiredError(
                'giteaId',
                'Required parameter "giteaId" was null or undefined when calling giteaOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['giteaId'] != null) {
            queryParameters['giteaId'] = requestParameters['giteaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaOne(requestParameters: GiteaOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaTestConnectionRaw(requestParameters: GiteaTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaTestConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'giteaTestConnectionRequest',
                'Required parameter "giteaTestConnectionRequest" was null or undefined when calling giteaTestConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.testConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiteaTestConnectionRequestToJSON(requestParameters['giteaTestConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaTestConnection(requestParameters: GiteaTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaTestConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async giteaUpdateRaw(requestParameters: GiteaUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['giteaUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'giteaUpdateRequest',
                'Required parameter "giteaUpdateRequest" was null or undefined when calling giteaUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitea.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiteaUpdateRequestToJSON(requestParameters['giteaUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async giteaUpdate(requestParameters: GiteaUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.giteaUpdateRaw(requestParameters, initOverrides);
    }

}
