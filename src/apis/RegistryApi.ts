/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  RegistryCreateRequest,
  RegistryRemoveRequest,
  RegistryTestRegistryRequest,
  RegistryUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RegistryCreateRequestFromJSON,
    RegistryCreateRequestToJSON,
    RegistryRemoveRequestFromJSON,
    RegistryRemoveRequestToJSON,
    RegistryTestRegistryRequestFromJSON,
    RegistryTestRegistryRequestToJSON,
    RegistryUpdateRequestFromJSON,
    RegistryUpdateRequestToJSON,
} from '../models/index';

export interface RegistryCreateOperationRequest {
    registryCreateRequest: RegistryCreateRequest;
}

export interface RegistryOneRequest {
    registryId: string;
}

export interface RegistryRemoveOperationRequest {
    registryRemoveRequest: RegistryRemoveRequest;
}

export interface RegistryTestRegistryOperationRequest {
    registryTestRegistryRequest: RegistryTestRegistryRequest;
}

export interface RegistryUpdateOperationRequest {
    registryUpdateRequest: RegistryUpdateRequest;
}

/**
 * 
 */
export class RegistryApi extends runtime.BaseAPI {

    /**
     */
    async registryAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryAllRaw(initOverrides);
    }

    /**
     */
    async registryCreateRaw(requestParameters: RegistryCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registryCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'registryCreateRequest',
                'Required parameter "registryCreateRequest" was null or undefined when calling registryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistryCreateRequestToJSON(requestParameters['registryCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryCreate(requestParameters: RegistryCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registryOneRaw(requestParameters: RegistryOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registryId'] == null) {
            throw new runtime.RequiredError(
                'registryId',
                'Required parameter "registryId" was null or undefined when calling registryOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['registryId'] != null) {
            queryParameters['registryId'] = requestParameters['registryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryOne(requestParameters: RegistryOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registryRemoveRaw(requestParameters: RegistryRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registryRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'registryRemoveRequest',
                'Required parameter "registryRemoveRequest" was null or undefined when calling registryRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistryRemoveRequestToJSON(requestParameters['registryRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryRemove(requestParameters: RegistryRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registryTestRegistryRaw(requestParameters: RegistryTestRegistryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registryTestRegistryRequest'] == null) {
            throw new runtime.RequiredError(
                'registryTestRegistryRequest',
                'Required parameter "registryTestRegistryRequest" was null or undefined when calling registryTestRegistry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.testRegistry`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistryTestRegistryRequestToJSON(requestParameters['registryTestRegistryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryTestRegistry(requestParameters: RegistryTestRegistryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryTestRegistryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registryUpdateRaw(requestParameters: RegistryUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registryUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'registryUpdateRequest',
                'Required parameter "registryUpdateRequest" was null or undefined when calling registryUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/registry.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistryUpdateRequestToJSON(requestParameters['registryUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registryUpdate(requestParameters: RegistryUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registryUpdateRaw(requestParameters, initOverrides);
    }

}
