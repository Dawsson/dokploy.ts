/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  PostgresChangeStatusRequest,
  PostgresCreateRequest,
  PostgresMoveRequest,
  PostgresReloadRequest,
  PostgresSaveEnvironmentRequest,
  PostgresSaveExternalPortRequest,
  PostgresStartRequest,
  PostgresUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    PostgresChangeStatusRequestFromJSON,
    PostgresChangeStatusRequestToJSON,
    PostgresCreateRequestFromJSON,
    PostgresCreateRequestToJSON,
    PostgresMoveRequestFromJSON,
    PostgresMoveRequestToJSON,
    PostgresReloadRequestFromJSON,
    PostgresReloadRequestToJSON,
    PostgresSaveEnvironmentRequestFromJSON,
    PostgresSaveEnvironmentRequestToJSON,
    PostgresSaveExternalPortRequestFromJSON,
    PostgresSaveExternalPortRequestToJSON,
    PostgresStartRequestFromJSON,
    PostgresStartRequestToJSON,
    PostgresUpdateRequestFromJSON,
    PostgresUpdateRequestToJSON,
} from '../models/index';

export interface PostgresChangeStatusOperationRequest {
    postgresChangeStatusRequest: PostgresChangeStatusRequest;
}

export interface PostgresCreateOperationRequest {
    postgresCreateRequest: PostgresCreateRequest;
}

export interface PostgresDeployRequest {
    postgresStartRequest: PostgresStartRequest;
}

export interface PostgresMoveOperationRequest {
    postgresMoveRequest: PostgresMoveRequest;
}

export interface PostgresOneRequest {
    postgresId: string;
}

export interface PostgresRebuildRequest {
    postgresStartRequest: PostgresStartRequest;
}

export interface PostgresReloadOperationRequest {
    postgresReloadRequest: PostgresReloadRequest;
}

export interface PostgresRemoveRequest {
    postgresStartRequest: PostgresStartRequest;
}

export interface PostgresSaveEnvironmentOperationRequest {
    postgresSaveEnvironmentRequest: PostgresSaveEnvironmentRequest;
}

export interface PostgresSaveExternalPortOperationRequest {
    postgresSaveExternalPortRequest: PostgresSaveExternalPortRequest;
}

export interface PostgresStartOperationRequest {
    postgresStartRequest: PostgresStartRequest;
}

export interface PostgresStopRequest {
    postgresStartRequest: PostgresStartRequest;
}

export interface PostgresUpdateOperationRequest {
    postgresUpdateRequest: PostgresUpdateRequest;
}

/**
 * 
 */
export class PostgresApi extends runtime.BaseAPI {

    /**
     */
    async postgresChangeStatusRaw(requestParameters: PostgresChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresChangeStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresChangeStatusRequest',
                'Required parameter "postgresChangeStatusRequest" was null or undefined when calling postgresChangeStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.changeStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresChangeStatusRequestToJSON(requestParameters['postgresChangeStatusRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresChangeStatus(requestParameters: PostgresChangeStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresChangeStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresCreateRaw(requestParameters: PostgresCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresCreateRequest',
                'Required parameter "postgresCreateRequest" was null or undefined when calling postgresCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresCreateRequestToJSON(requestParameters['postgresCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresCreate(requestParameters: PostgresCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresDeployRaw(requestParameters: PostgresDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresStartRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresStartRequest',
                'Required parameter "postgresStartRequest" was null or undefined when calling postgresDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresStartRequestToJSON(requestParameters['postgresStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresDeploy(requestParameters: PostgresDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresMoveRaw(requestParameters: PostgresMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresMoveRequest',
                'Required parameter "postgresMoveRequest" was null or undefined when calling postgresMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresMoveRequestToJSON(requestParameters['postgresMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresMove(requestParameters: PostgresMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresOneRaw(requestParameters: PostgresOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresId'] == null) {
            throw new runtime.RequiredError(
                'postgresId',
                'Required parameter "postgresId" was null or undefined when calling postgresOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postgresId'] != null) {
            queryParameters['postgresId'] = requestParameters['postgresId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresOne(requestParameters: PostgresOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresRebuildRaw(requestParameters: PostgresRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresStartRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresStartRequest',
                'Required parameter "postgresStartRequest" was null or undefined when calling postgresRebuild().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.rebuild`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresStartRequestToJSON(requestParameters['postgresStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresRebuild(requestParameters: PostgresRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresRebuildRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresReloadRaw(requestParameters: PostgresReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresReloadRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresReloadRequest',
                'Required parameter "postgresReloadRequest" was null or undefined when calling postgresReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.reload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresReloadRequestToJSON(requestParameters['postgresReloadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresReload(requestParameters: PostgresReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresReloadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresRemoveRaw(requestParameters: PostgresRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresStartRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresStartRequest',
                'Required parameter "postgresStartRequest" was null or undefined when calling postgresRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresStartRequestToJSON(requestParameters['postgresStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresRemove(requestParameters: PostgresRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresSaveEnvironmentRaw(requestParameters: PostgresSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresSaveEnvironmentRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresSaveEnvironmentRequest',
                'Required parameter "postgresSaveEnvironmentRequest" was null or undefined when calling postgresSaveEnvironment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.saveEnvironment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresSaveEnvironmentRequestToJSON(requestParameters['postgresSaveEnvironmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresSaveEnvironment(requestParameters: PostgresSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresSaveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresSaveExternalPortRaw(requestParameters: PostgresSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresSaveExternalPortRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresSaveExternalPortRequest',
                'Required parameter "postgresSaveExternalPortRequest" was null or undefined when calling postgresSaveExternalPort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.saveExternalPort`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresSaveExternalPortRequestToJSON(requestParameters['postgresSaveExternalPortRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresSaveExternalPort(requestParameters: PostgresSaveExternalPortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresSaveExternalPortRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresStartRaw(requestParameters: PostgresStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresStartRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresStartRequest',
                'Required parameter "postgresStartRequest" was null or undefined when calling postgresStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresStartRequestToJSON(requestParameters['postgresStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresStart(requestParameters: PostgresStartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresStopRaw(requestParameters: PostgresStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresStartRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresStartRequest',
                'Required parameter "postgresStartRequest" was null or undefined when calling postgresStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresStartRequestToJSON(requestParameters['postgresStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresStop(requestParameters: PostgresStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postgresUpdateRaw(requestParameters: PostgresUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postgresUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'postgresUpdateRequest',
                'Required parameter "postgresUpdateRequest" was null or undefined when calling postgresUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/postgres.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostgresUpdateRequestToJSON(requestParameters['postgresUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postgresUpdate(requestParameters: PostgresUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postgresUpdateRaw(requestParameters, initOverrides);
    }

}
