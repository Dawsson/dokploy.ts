/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  ProjectCreateRequest,
  ProjectDuplicateRequest,
  ProjectRemoveRequest,
  ProjectUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    ProjectCreateRequestFromJSON,
    ProjectCreateRequestToJSON,
    ProjectDuplicateRequestFromJSON,
    ProjectDuplicateRequestToJSON,
    ProjectRemoveRequestFromJSON,
    ProjectRemoveRequestToJSON,
    ProjectUpdateRequestFromJSON,
    ProjectUpdateRequestToJSON,
} from '../models/index';

export interface ProjectCreateOperationRequest {
    projectCreateRequest: ProjectCreateRequest;
}

export interface ProjectDuplicateOperationRequest {
    projectDuplicateRequest: ProjectDuplicateRequest;
}

export interface ProjectOneRequest {
    projectId: string;
}

export interface ProjectRemoveOperationRequest {
    projectRemoveRequest: ProjectRemoveRequest;
}

export interface ProjectUpdateOperationRequest {
    projectUpdateRequest: ProjectUpdateRequest;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     */
    async projectAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectAllRaw(initOverrides);
    }

    /**
     */
    async projectCreateRaw(requestParameters: ProjectCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectCreateRequest',
                'Required parameter "projectCreateRequest" was null or undefined when calling projectCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCreateRequestToJSON(requestParameters['projectCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectCreate(requestParameters: ProjectCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectDuplicateRaw(requestParameters: ProjectDuplicateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectDuplicateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectDuplicateRequest',
                'Required parameter "projectDuplicateRequest" was null or undefined when calling projectDuplicate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.duplicate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDuplicateRequestToJSON(requestParameters['projectDuplicateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectDuplicate(requestParameters: ProjectDuplicateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectDuplicateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectOneRaw(requestParameters: ProjectOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling projectOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectOne(requestParameters: ProjectOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectRemoveRaw(requestParameters: ProjectRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'projectRemoveRequest',
                'Required parameter "projectRemoveRequest" was null or undefined when calling projectRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRemoveRequestToJSON(requestParameters['projectRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectRemove(requestParameters: ProjectRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectUpdateRaw(requestParameters: ProjectUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectUpdateRequest',
                'Required parameter "projectUpdateRequest" was null or undefined when calling projectUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/project.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateRequestToJSON(requestParameters['projectUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectUpdate(requestParameters: ProjectUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectUpdateRaw(requestParameters, initOverrides);
    }

}
