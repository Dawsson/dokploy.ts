/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  SshKeyCreateRequest,
  SshKeyGenerateRequest,
  SshKeyRemoveRequest,
  SshKeyUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    SshKeyCreateRequestFromJSON,
    SshKeyCreateRequestToJSON,
    SshKeyGenerateRequestFromJSON,
    SshKeyGenerateRequestToJSON,
    SshKeyRemoveRequestFromJSON,
    SshKeyRemoveRequestToJSON,
    SshKeyUpdateRequestFromJSON,
    SshKeyUpdateRequestToJSON,
} from '../models/index';

export interface SshKeyCreateOperationRequest {
    sshKeyCreateRequest: SshKeyCreateRequest;
}

export interface SshKeyGenerateOperationRequest {
    sshKeyGenerateRequest: SshKeyGenerateRequest;
}

export interface SshKeyOneRequest {
    sshKeyId: string;
}

export interface SshKeyRemoveOperationRequest {
    sshKeyRemoveRequest: SshKeyRemoveRequest;
}

export interface SshKeyUpdateOperationRequest {
    sshKeyUpdateRequest: SshKeyUpdateRequest;
}

/**
 * 
 */
export class SshKeyApi extends runtime.BaseAPI {

    /**
     */
    async sshKeyAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyAllRaw(initOverrides);
    }

    /**
     */
    async sshKeyCreateRaw(requestParameters: SshKeyCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshKeyCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshKeyCreateRequest',
                'Required parameter "sshKeyCreateRequest" was null or undefined when calling sshKeyCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshKeyCreateRequestToJSON(requestParameters['sshKeyCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyCreate(requestParameters: SshKeyCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshKeyGenerateRaw(requestParameters: SshKeyGenerateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshKeyGenerateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshKeyGenerateRequest',
                'Required parameter "sshKeyGenerateRequest" was null or undefined when calling sshKeyGenerate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.generate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshKeyGenerateRequestToJSON(requestParameters['sshKeyGenerateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyGenerate(requestParameters: SshKeyGenerateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyGenerateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshKeyOneRaw(requestParameters: SshKeyOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshKeyId'] == null) {
            throw new runtime.RequiredError(
                'sshKeyId',
                'Required parameter "sshKeyId" was null or undefined when calling sshKeyOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sshKeyId'] != null) {
            queryParameters['sshKeyId'] = requestParameters['sshKeyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyOne(requestParameters: SshKeyOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshKeyRemoveRaw(requestParameters: SshKeyRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshKeyRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'sshKeyRemoveRequest',
                'Required parameter "sshKeyRemoveRequest" was null or undefined when calling sshKeyRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshKeyRemoveRequestToJSON(requestParameters['sshKeyRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyRemove(requestParameters: SshKeyRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sshKeyUpdateRaw(requestParameters: SshKeyUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sshKeyUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'sshKeyUpdateRequest',
                'Required parameter "sshKeyUpdateRequest" was null or undefined when calling sshKeyUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/sshKey.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SshKeyUpdateRequestToJSON(requestParameters['sshKeyUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sshKeyUpdate(requestParameters: SshKeyUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sshKeyUpdateRaw(requestParameters, initOverrides);
    }

}
