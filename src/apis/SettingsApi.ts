/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  SettingsAssignDomainServerRequest,
  SettingsReloadTraefikRequest,
  SettingsSaveSSHPrivateKeyRequest,
  SettingsToggleDashboardRequest,
  SettingsToggleRequestsRequest,
  SettingsUpdateDockerCleanupRequest,
  SettingsUpdateLogCleanupRequest,
  SettingsUpdateTraefikConfigRequest,
  SettingsUpdateTraefikFileRequest,
  SettingsUpdateTraefikPortsRequest,
  SettingsWriteTraefikEnvRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    SettingsAssignDomainServerRequestFromJSON,
    SettingsAssignDomainServerRequestToJSON,
    SettingsReloadTraefikRequestFromJSON,
    SettingsReloadTraefikRequestToJSON,
    SettingsSaveSSHPrivateKeyRequestFromJSON,
    SettingsSaveSSHPrivateKeyRequestToJSON,
    SettingsToggleDashboardRequestFromJSON,
    SettingsToggleDashboardRequestToJSON,
    SettingsToggleRequestsRequestFromJSON,
    SettingsToggleRequestsRequestToJSON,
    SettingsUpdateDockerCleanupRequestFromJSON,
    SettingsUpdateDockerCleanupRequestToJSON,
    SettingsUpdateLogCleanupRequestFromJSON,
    SettingsUpdateLogCleanupRequestToJSON,
    SettingsUpdateTraefikConfigRequestFromJSON,
    SettingsUpdateTraefikConfigRequestToJSON,
    SettingsUpdateTraefikFileRequestFromJSON,
    SettingsUpdateTraefikFileRequestToJSON,
    SettingsUpdateTraefikPortsRequestFromJSON,
    SettingsUpdateTraefikPortsRequestToJSON,
    SettingsWriteTraefikEnvRequestFromJSON,
    SettingsWriteTraefikEnvRequestToJSON,
} from '../models/index';

export interface SettingsAssignDomainServerOperationRequest {
    settingsAssignDomainServerRequest: SettingsAssignDomainServerRequest;
}

export interface SettingsCheckGPUStatusRequest {
    serverId?: string;
}

export interface SettingsCleanAllRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsCleanDockerBuilderRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsCleanDockerPruneRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsCleanStoppedContainersRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsCleanUnusedImagesRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsCleanUnusedVolumesRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsGetTraefikPortsRequest {
    serverId?: string;
}

export interface SettingsHaveTraefikDashboardPortEnabledRequest {
    serverId?: string;
}

export interface SettingsReadDirectoriesRequest {
    serverId?: string;
}

export interface SettingsReadTraefikEnvRequest {
    serverId?: string;
}

export interface SettingsReadTraefikFileRequest {
    path: string;
    serverId?: string;
}

export interface SettingsReloadTraefikOperationRequest {
    settingsReloadTraefikRequest?: SettingsReloadTraefikRequest;
}

export interface SettingsSaveSSHPrivateKeyOperationRequest {
    settingsSaveSSHPrivateKeyRequest: SettingsSaveSSHPrivateKeyRequest;
}

export interface SettingsSetupGPURequest {
    settingsReloadTraefikRequest: SettingsReloadTraefikRequest;
}

export interface SettingsToggleDashboardOperationRequest {
    settingsToggleDashboardRequest: SettingsToggleDashboardRequest;
}

export interface SettingsToggleRequestsOperationRequest {
    settingsToggleRequestsRequest: SettingsToggleRequestsRequest;
}

export interface SettingsUpdateDockerCleanupOperationRequest {
    settingsUpdateDockerCleanupRequest: SettingsUpdateDockerCleanupRequest;
}

export interface SettingsUpdateLogCleanupOperationRequest {
    settingsUpdateLogCleanupRequest: SettingsUpdateLogCleanupRequest;
}

export interface SettingsUpdateMiddlewareTraefikConfigRequest {
    settingsUpdateTraefikConfigRequest: SettingsUpdateTraefikConfigRequest;
}

export interface SettingsUpdateTraefikConfigOperationRequest {
    settingsUpdateTraefikConfigRequest: SettingsUpdateTraefikConfigRequest;
}

export interface SettingsUpdateTraefikFileOperationRequest {
    settingsUpdateTraefikFileRequest: SettingsUpdateTraefikFileRequest;
}

export interface SettingsUpdateTraefikPortsOperationRequest {
    settingsUpdateTraefikPortsRequest: SettingsUpdateTraefikPortsRequest;
}

export interface SettingsUpdateWebServerTraefikConfigRequest {
    settingsUpdateTraefikConfigRequest: SettingsUpdateTraefikConfigRequest;
}

export interface SettingsWriteTraefikEnvOperationRequest {
    settingsWriteTraefikEnvRequest: SettingsWriteTraefikEnvRequest;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     */
    async settingsAssignDomainServerRaw(requestParameters: SettingsAssignDomainServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsAssignDomainServerRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsAssignDomainServerRequest',
                'Required parameter "settingsAssignDomainServerRequest" was null or undefined when calling settingsAssignDomainServer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.assignDomainServer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsAssignDomainServerRequestToJSON(requestParameters['settingsAssignDomainServerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsAssignDomainServer(requestParameters: SettingsAssignDomainServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsAssignDomainServerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCheckGPUStatusRaw(requestParameters: SettingsCheckGPUStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.checkGPUStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCheckGPUStatus(requestParameters: SettingsCheckGPUStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCheckGPUStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanAllRaw(requestParameters: SettingsCleanAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanAll`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanAll(requestParameters: SettingsCleanAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanDockerBuilderRaw(requestParameters: SettingsCleanDockerBuilderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanDockerBuilder`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanDockerBuilder(requestParameters: SettingsCleanDockerBuilderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanDockerBuilderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanDockerPruneRaw(requestParameters: SettingsCleanDockerPruneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanDockerPrune`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanDockerPrune(requestParameters: SettingsCleanDockerPruneRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanDockerPruneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanMonitoringRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanMonitoring`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanMonitoring(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanMonitoringRaw(initOverrides);
    }

    /**
     */
    async settingsCleanRedisRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanRedis`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanRedis(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanRedisRaw(initOverrides);
    }

    /**
     */
    async settingsCleanSSHPrivateKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanSSHPrivateKey`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanSSHPrivateKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanSSHPrivateKeyRaw(initOverrides);
    }

    /**
     */
    async settingsCleanStoppedContainersRaw(requestParameters: SettingsCleanStoppedContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanStoppedContainers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanStoppedContainers(requestParameters: SettingsCleanStoppedContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanStoppedContainersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanUnusedImagesRaw(requestParameters: SettingsCleanUnusedImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanUnusedImages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanUnusedImages(requestParameters: SettingsCleanUnusedImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanUnusedImagesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsCleanUnusedVolumesRaw(requestParameters: SettingsCleanUnusedVolumesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.cleanUnusedVolumes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsCleanUnusedVolumes(requestParameters: SettingsCleanUnusedVolumesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsCleanUnusedVolumesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsGetDokployVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getDokployVersion`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetDokployVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetDokployVersionRaw(initOverrides);
    }

    /**
     */
    async settingsGetIpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getIp`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetIp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetIpRaw(initOverrides);
    }

    /**
     */
    async settingsGetLogCleanupStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getLogCleanupStatus`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetLogCleanupStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetLogCleanupStatusRaw(initOverrides);
    }

    /**
     */
    async settingsGetOpenApiDocumentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getOpenApiDocument`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetOpenApiDocument(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetOpenApiDocumentRaw(initOverrides);
    }

    /**
     */
    async settingsGetReleaseTagRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getReleaseTag`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetReleaseTag(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetReleaseTagRaw(initOverrides);
    }

    /**
     */
    async settingsGetTraefikPortsRaw(requestParameters: SettingsGetTraefikPortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getTraefikPorts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetTraefikPorts(requestParameters: SettingsGetTraefikPortsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetTraefikPortsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsGetUpdateDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.getUpdateData`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsGetUpdateData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsGetUpdateDataRaw(initOverrides);
    }

    /**
     */
    async settingsHaveActivateRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.haveActivateRequests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsHaveActivateRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsHaveActivateRequestsRaw(initOverrides);
    }

    /**
     */
    async settingsHaveTraefikDashboardPortEnabledRaw(requestParameters: SettingsHaveTraefikDashboardPortEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.haveTraefikDashboardPortEnabled`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsHaveTraefikDashboardPortEnabled(requestParameters: SettingsHaveTraefikDashboardPortEnabledRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsHaveTraefikDashboardPortEnabledRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsHealthRaw(initOverrides);
    }

    /**
     */
    async settingsIsCloudRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.isCloud`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsIsCloud(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsIsCloudRaw(initOverrides);
    }

    /**
     */
    async settingsReadDirectoriesRaw(requestParameters: SettingsReadDirectoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readDirectories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadDirectories(requestParameters: SettingsReadDirectoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadDirectoriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsReadMiddlewareTraefikConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readMiddlewareTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadMiddlewareTraefikConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadMiddlewareTraefikConfigRaw(initOverrides);
    }

    /**
     */
    async settingsReadTraefikConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadTraefikConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadTraefikConfigRaw(initOverrides);
    }

    /**
     */
    async settingsReadTraefikEnvRaw(requestParameters: SettingsReadTraefikEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readTraefikEnv`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadTraefikEnv(requestParameters: SettingsReadTraefikEnvRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadTraefikEnvRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsReadTraefikFileRaw(requestParameters: SettingsReadTraefikFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling settingsReadTraefikFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readTraefikFile`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadTraefikFile(requestParameters: SettingsReadTraefikFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadTraefikFileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsReadWebServerTraefikConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.readWebServerTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReadWebServerTraefikConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReadWebServerTraefikConfigRaw(initOverrides);
    }

    /**
     */
    async settingsReloadRedisRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.reloadRedis`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReloadRedis(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReloadRedisRaw(initOverrides);
    }

    /**
     */
    async settingsReloadServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.reloadServer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReloadServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReloadServerRaw(initOverrides);
    }

    /**
     */
    async settingsReloadTraefikRaw(requestParameters: SettingsReloadTraefikOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.reloadTraefik`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsReloadTraefik(requestParameters: SettingsReloadTraefikOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsReloadTraefikRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsSaveSSHPrivateKeyRaw(requestParameters: SettingsSaveSSHPrivateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsSaveSSHPrivateKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsSaveSSHPrivateKeyRequest',
                'Required parameter "settingsSaveSSHPrivateKeyRequest" was null or undefined when calling settingsSaveSSHPrivateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.saveSSHPrivateKey`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsSaveSSHPrivateKeyRequestToJSON(requestParameters['settingsSaveSSHPrivateKeyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsSaveSSHPrivateKey(requestParameters: SettingsSaveSSHPrivateKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsSaveSSHPrivateKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsSetupGPURaw(requestParameters: SettingsSetupGPURequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsReloadTraefikRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsReloadTraefikRequest',
                'Required parameter "settingsReloadTraefikRequest" was null or undefined when calling settingsSetupGPU().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.setupGPU`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsReloadTraefikRequestToJSON(requestParameters['settingsReloadTraefikRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsSetupGPU(requestParameters: SettingsSetupGPURequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsSetupGPURaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsToggleDashboardRaw(requestParameters: SettingsToggleDashboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsToggleDashboardRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsToggleDashboardRequest',
                'Required parameter "settingsToggleDashboardRequest" was null or undefined when calling settingsToggleDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.toggleDashboard`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsToggleDashboardRequestToJSON(requestParameters['settingsToggleDashboardRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsToggleDashboard(requestParameters: SettingsToggleDashboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsToggleDashboardRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsToggleRequestsRaw(requestParameters: SettingsToggleRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsToggleRequestsRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsToggleRequestsRequest',
                'Required parameter "settingsToggleRequestsRequest" was null or undefined when calling settingsToggleRequests().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.toggleRequests`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsToggleRequestsRequestToJSON(requestParameters['settingsToggleRequestsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsToggleRequests(requestParameters: SettingsToggleRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsToggleRequestsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateDockerCleanupRaw(requestParameters: SettingsUpdateDockerCleanupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateDockerCleanupRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateDockerCleanupRequest',
                'Required parameter "settingsUpdateDockerCleanupRequest" was null or undefined when calling settingsUpdateDockerCleanup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateDockerCleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateDockerCleanupRequestToJSON(requestParameters['settingsUpdateDockerCleanupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateDockerCleanup(requestParameters: SettingsUpdateDockerCleanupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateDockerCleanupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateLogCleanupRaw(requestParameters: SettingsUpdateLogCleanupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateLogCleanupRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateLogCleanupRequest',
                'Required parameter "settingsUpdateLogCleanupRequest" was null or undefined when calling settingsUpdateLogCleanup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateLogCleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateLogCleanupRequestToJSON(requestParameters['settingsUpdateLogCleanupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateLogCleanup(requestParameters: SettingsUpdateLogCleanupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateLogCleanupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateMiddlewareTraefikConfigRaw(requestParameters: SettingsUpdateMiddlewareTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateTraefikConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateTraefikConfigRequest',
                'Required parameter "settingsUpdateTraefikConfigRequest" was null or undefined when calling settingsUpdateMiddlewareTraefikConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateMiddlewareTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateTraefikConfigRequestToJSON(requestParameters['settingsUpdateTraefikConfigRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateMiddlewareTraefikConfig(requestParameters: SettingsUpdateMiddlewareTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateMiddlewareTraefikConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateServer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateServerRaw(initOverrides);
    }

    /**
     */
    async settingsUpdateTraefikConfigRaw(requestParameters: SettingsUpdateTraefikConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateTraefikConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateTraefikConfigRequest',
                'Required parameter "settingsUpdateTraefikConfigRequest" was null or undefined when calling settingsUpdateTraefikConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateTraefikConfigRequestToJSON(requestParameters['settingsUpdateTraefikConfigRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateTraefikConfig(requestParameters: SettingsUpdateTraefikConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateTraefikConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateTraefikFileRaw(requestParameters: SettingsUpdateTraefikFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateTraefikFileRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateTraefikFileRequest',
                'Required parameter "settingsUpdateTraefikFileRequest" was null or undefined when calling settingsUpdateTraefikFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateTraefikFile`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateTraefikFileRequestToJSON(requestParameters['settingsUpdateTraefikFileRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateTraefikFile(requestParameters: SettingsUpdateTraefikFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateTraefikFileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateTraefikPortsRaw(requestParameters: SettingsUpdateTraefikPortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateTraefikPortsRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateTraefikPortsRequest',
                'Required parameter "settingsUpdateTraefikPortsRequest" was null or undefined when calling settingsUpdateTraefikPorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateTraefikPorts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateTraefikPortsRequestToJSON(requestParameters['settingsUpdateTraefikPortsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateTraefikPorts(requestParameters: SettingsUpdateTraefikPortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateTraefikPortsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsUpdateWebServerTraefikConfigRaw(requestParameters: SettingsUpdateWebServerTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsUpdateTraefikConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsUpdateTraefikConfigRequest',
                'Required parameter "settingsUpdateTraefikConfigRequest" was null or undefined when calling settingsUpdateWebServerTraefikConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.updateWebServerTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsUpdateTraefikConfigRequestToJSON(requestParameters['settingsUpdateTraefikConfigRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsUpdateWebServerTraefikConfig(requestParameters: SettingsUpdateWebServerTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsUpdateWebServerTraefikConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async settingsWriteTraefikEnvRaw(requestParameters: SettingsWriteTraefikEnvOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['settingsWriteTraefikEnvRequest'] == null) {
            throw new runtime.RequiredError(
                'settingsWriteTraefikEnvRequest',
                'Required parameter "settingsWriteTraefikEnvRequest" was null or undefined when calling settingsWriteTraefikEnv().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/settings.writeTraefikEnv`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsWriteTraefikEnvRequestToJSON(requestParameters['settingsWriteTraefikEnvRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async settingsWriteTraefikEnv(requestParameters: SettingsWriteTraefikEnvOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.settingsWriteTraefikEnvRaw(requestParameters, initOverrides);
    }

}
