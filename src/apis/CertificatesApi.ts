/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificatesCreateRequest,
  CertificatesRemoveRequest,
  InlineObject,
} from '../models/index';
import {
    CertificatesCreateRequestFromJSON,
    CertificatesCreateRequestToJSON,
    CertificatesRemoveRequestFromJSON,
    CertificatesRemoveRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface CertificatesCreateOperationRequest {
    certificatesCreateRequest: CertificatesCreateRequest;
}

export interface CertificatesOneRequest {
    certificateId: string;
}

export interface CertificatesRemoveOperationRequest {
    certificatesRemoveRequest: CertificatesRemoveRequest;
}

/**
 * 
 */
export class CertificatesApi extends runtime.BaseAPI {

    /**
     */
    async certificatesAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/certificates.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificatesAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificatesAllRaw(initOverrides);
    }

    /**
     */
    async certificatesCreateRaw(requestParameters: CertificatesCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certificatesCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'certificatesCreateRequest',
                'Required parameter "certificatesCreateRequest" was null or undefined when calling certificatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/certificates.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertificatesCreateRequestToJSON(requestParameters['certificatesCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificatesCreate(requestParameters: CertificatesCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificatesCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certificatesOneRaw(requestParameters: CertificatesOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certificateId'] == null) {
            throw new runtime.RequiredError(
                'certificateId',
                'Required parameter "certificateId" was null or undefined when calling certificatesOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['certificateId'] != null) {
            queryParameters['certificateId'] = requestParameters['certificateId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/certificates.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificatesOne(requestParameters: CertificatesOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificatesOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certificatesRemoveRaw(requestParameters: CertificatesRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certificatesRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'certificatesRemoveRequest',
                'Required parameter "certificatesRemoveRequest" was null or undefined when calling certificatesRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/certificates.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertificatesRemoveRequestToJSON(requestParameters['certificatesRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificatesRemove(requestParameters: CertificatesRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificatesRemoveRaw(requestParameters, initOverrides);
    }

}
