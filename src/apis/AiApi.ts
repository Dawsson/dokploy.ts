/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiCreateRequest,
  AiDeleteRequest,
  AiDeployRequest,
  AiSuggestRequest,
  AiUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    AiCreateRequestFromJSON,
    AiCreateRequestToJSON,
    AiDeleteRequestFromJSON,
    AiDeleteRequestToJSON,
    AiDeployRequestFromJSON,
    AiDeployRequestToJSON,
    AiSuggestRequestFromJSON,
    AiSuggestRequestToJSON,
    AiUpdateRequestFromJSON,
    AiUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface AiCreateOperationRequest {
    aiCreateRequest: AiCreateRequest;
}

export interface AiDeleteOperationRequest {
    aiDeleteRequest: AiDeleteRequest;
}

export interface AiDeployOperationRequest {
    aiDeployRequest: AiDeployRequest;
}

export interface AiGetRequest {
    aiId: string;
}

export interface AiGetModelsRequest {
    apiUrl: string;
    apiKey: string;
}

export interface AiOneRequest {
    aiId: string;
}

export interface AiSuggestOperationRequest {
    aiSuggestRequest: AiSuggestRequest;
}

export interface AiUpdateOperationRequest {
    aiUpdateRequest: AiUpdateRequest;
}

/**
 * 
 */
export class AiApi extends runtime.BaseAPI {

    /**
     */
    async aiCreateRaw(requestParameters: AiCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'aiCreateRequest',
                'Required parameter "aiCreateRequest" was null or undefined when calling aiCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiCreateRequestToJSON(requestParameters['aiCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiCreate(requestParameters: AiCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiDeleteRaw(requestParameters: AiDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'aiDeleteRequest',
                'Required parameter "aiDeleteRequest" was null or undefined when calling aiDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiDeleteRequestToJSON(requestParameters['aiDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiDelete(requestParameters: AiDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiDeployRaw(requestParameters: AiDeployOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiDeployRequest'] == null) {
            throw new runtime.RequiredError(
                'aiDeployRequest',
                'Required parameter "aiDeployRequest" was null or undefined when calling aiDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiDeployRequestToJSON(requestParameters['aiDeployRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiDeploy(requestParameters: AiDeployOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiGetRaw(requestParameters: AiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiId'] == null) {
            throw new runtime.RequiredError(
                'aiId',
                'Required parameter "aiId" was null or undefined when calling aiGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aiId'] != null) {
            queryParameters['aiId'] = requestParameters['aiId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiGet(requestParameters: AiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiGetAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.getAll`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiGetAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiGetAllRaw(initOverrides);
    }

    /**
     */
    async aiGetModelsRaw(requestParameters: AiGetModelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiUrl'] == null) {
            throw new runtime.RequiredError(
                'apiUrl',
                'Required parameter "apiUrl" was null or undefined when calling aiGetModels().'
            );
        }

        if (requestParameters['apiKey'] == null) {
            throw new runtime.RequiredError(
                'apiKey',
                'Required parameter "apiKey" was null or undefined when calling aiGetModels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiUrl'] != null) {
            queryParameters['apiUrl'] = requestParameters['apiUrl'];
        }

        if (requestParameters['apiKey'] != null) {
            queryParameters['apiKey'] = requestParameters['apiKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.getModels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiGetModels(requestParameters: AiGetModelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiGetModelsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiOneRaw(requestParameters: AiOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiId'] == null) {
            throw new runtime.RequiredError(
                'aiId',
                'Required parameter "aiId" was null or undefined when calling aiOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aiId'] != null) {
            queryParameters['aiId'] = requestParameters['aiId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiOne(requestParameters: AiOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiSuggestRaw(requestParameters: AiSuggestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiSuggestRequest'] == null) {
            throw new runtime.RequiredError(
                'aiSuggestRequest',
                'Required parameter "aiSuggestRequest" was null or undefined when calling aiSuggest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.suggest`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiSuggestRequestToJSON(requestParameters['aiSuggestRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiSuggest(requestParameters: AiSuggestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiSuggestRaw(requestParameters, initOverrides);
    }

    /**
     */
    async aiUpdateRaw(requestParameters: AiUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'aiUpdateRequest',
                'Required parameter "aiUpdateRequest" was null or undefined when calling aiUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/ai.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiUpdateRequestToJSON(requestParameters['aiUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aiUpdate(requestParameters: AiUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiUpdateRaw(requestParameters, initOverrides);
    }

}
