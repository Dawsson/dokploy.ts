/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  NotificationCreateDiscordRequest,
  NotificationCreateEmailRequest,
  NotificationCreateGotifyRequest,
  NotificationCreateSlackRequest,
  NotificationCreateTelegramRequest,
  NotificationReceiveNotificationRequest,
  NotificationRemoveRequest,
  NotificationTestDiscordConnectionRequest,
  NotificationTestEmailConnectionRequest,
  NotificationTestGotifyConnectionRequest,
  NotificationTestSlackConnectionRequest,
  NotificationTestTelegramConnectionRequest,
  NotificationUpdateDiscordRequest,
  NotificationUpdateEmailRequest,
  NotificationUpdateGotifyRequest,
  NotificationUpdateSlackRequest,
  NotificationUpdateTelegramRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    NotificationCreateDiscordRequestFromJSON,
    NotificationCreateDiscordRequestToJSON,
    NotificationCreateEmailRequestFromJSON,
    NotificationCreateEmailRequestToJSON,
    NotificationCreateGotifyRequestFromJSON,
    NotificationCreateGotifyRequestToJSON,
    NotificationCreateSlackRequestFromJSON,
    NotificationCreateSlackRequestToJSON,
    NotificationCreateTelegramRequestFromJSON,
    NotificationCreateTelegramRequestToJSON,
    NotificationReceiveNotificationRequestFromJSON,
    NotificationReceiveNotificationRequestToJSON,
    NotificationRemoveRequestFromJSON,
    NotificationRemoveRequestToJSON,
    NotificationTestDiscordConnectionRequestFromJSON,
    NotificationTestDiscordConnectionRequestToJSON,
    NotificationTestEmailConnectionRequestFromJSON,
    NotificationTestEmailConnectionRequestToJSON,
    NotificationTestGotifyConnectionRequestFromJSON,
    NotificationTestGotifyConnectionRequestToJSON,
    NotificationTestSlackConnectionRequestFromJSON,
    NotificationTestSlackConnectionRequestToJSON,
    NotificationTestTelegramConnectionRequestFromJSON,
    NotificationTestTelegramConnectionRequestToJSON,
    NotificationUpdateDiscordRequestFromJSON,
    NotificationUpdateDiscordRequestToJSON,
    NotificationUpdateEmailRequestFromJSON,
    NotificationUpdateEmailRequestToJSON,
    NotificationUpdateGotifyRequestFromJSON,
    NotificationUpdateGotifyRequestToJSON,
    NotificationUpdateSlackRequestFromJSON,
    NotificationUpdateSlackRequestToJSON,
    NotificationUpdateTelegramRequestFromJSON,
    NotificationUpdateTelegramRequestToJSON,
} from '../models/index';

export interface NotificationCreateDiscordOperationRequest {
    notificationCreateDiscordRequest: NotificationCreateDiscordRequest;
}

export interface NotificationCreateEmailOperationRequest {
    notificationCreateEmailRequest: NotificationCreateEmailRequest;
}

export interface NotificationCreateGotifyOperationRequest {
    notificationCreateGotifyRequest: NotificationCreateGotifyRequest;
}

export interface NotificationCreateSlackOperationRequest {
    notificationCreateSlackRequest: NotificationCreateSlackRequest;
}

export interface NotificationCreateTelegramOperationRequest {
    notificationCreateTelegramRequest: NotificationCreateTelegramRequest;
}

export interface NotificationOneRequest {
    notificationId: string;
}

export interface NotificationReceiveNotificationOperationRequest {
    notificationReceiveNotificationRequest: NotificationReceiveNotificationRequest;
}

export interface NotificationRemoveOperationRequest {
    notificationRemoveRequest: NotificationRemoveRequest;
}

export interface NotificationTestDiscordConnectionOperationRequest {
    notificationTestDiscordConnectionRequest: NotificationTestDiscordConnectionRequest;
}

export interface NotificationTestEmailConnectionOperationRequest {
    notificationTestEmailConnectionRequest: NotificationTestEmailConnectionRequest;
}

export interface NotificationTestGotifyConnectionOperationRequest {
    notificationTestGotifyConnectionRequest: NotificationTestGotifyConnectionRequest;
}

export interface NotificationTestSlackConnectionOperationRequest {
    notificationTestSlackConnectionRequest: NotificationTestSlackConnectionRequest;
}

export interface NotificationTestTelegramConnectionOperationRequest {
    notificationTestTelegramConnectionRequest: NotificationTestTelegramConnectionRequest;
}

export interface NotificationUpdateDiscordOperationRequest {
    notificationUpdateDiscordRequest: NotificationUpdateDiscordRequest;
}

export interface NotificationUpdateEmailOperationRequest {
    notificationUpdateEmailRequest: NotificationUpdateEmailRequest;
}

export interface NotificationUpdateGotifyOperationRequest {
    notificationUpdateGotifyRequest: NotificationUpdateGotifyRequest;
}

export interface NotificationUpdateSlackOperationRequest {
    notificationUpdateSlackRequest: NotificationUpdateSlackRequest;
}

export interface NotificationUpdateTelegramOperationRequest {
    notificationUpdateTelegramRequest: NotificationUpdateTelegramRequest;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    async notificationAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationAllRaw(initOverrides);
    }

    /**
     */
    async notificationCreateDiscordRaw(requestParameters: NotificationCreateDiscordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationCreateDiscordRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationCreateDiscordRequest',
                'Required parameter "notificationCreateDiscordRequest" was null or undefined when calling notificationCreateDiscord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.createDiscord`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationCreateDiscordRequestToJSON(requestParameters['notificationCreateDiscordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationCreateDiscord(requestParameters: NotificationCreateDiscordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationCreateDiscordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationCreateEmailRaw(requestParameters: NotificationCreateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationCreateEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationCreateEmailRequest',
                'Required parameter "notificationCreateEmailRequest" was null or undefined when calling notificationCreateEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.createEmail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationCreateEmailRequestToJSON(requestParameters['notificationCreateEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationCreateEmail(requestParameters: NotificationCreateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationCreateEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationCreateGotifyRaw(requestParameters: NotificationCreateGotifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationCreateGotifyRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationCreateGotifyRequest',
                'Required parameter "notificationCreateGotifyRequest" was null or undefined when calling notificationCreateGotify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.createGotify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationCreateGotifyRequestToJSON(requestParameters['notificationCreateGotifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationCreateGotify(requestParameters: NotificationCreateGotifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationCreateGotifyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationCreateSlackRaw(requestParameters: NotificationCreateSlackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationCreateSlackRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationCreateSlackRequest',
                'Required parameter "notificationCreateSlackRequest" was null or undefined when calling notificationCreateSlack().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.createSlack`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationCreateSlackRequestToJSON(requestParameters['notificationCreateSlackRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationCreateSlack(requestParameters: NotificationCreateSlackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationCreateSlackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationCreateTelegramRaw(requestParameters: NotificationCreateTelegramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationCreateTelegramRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationCreateTelegramRequest',
                'Required parameter "notificationCreateTelegramRequest" was null or undefined when calling notificationCreateTelegram().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.createTelegram`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationCreateTelegramRequestToJSON(requestParameters['notificationCreateTelegramRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationCreateTelegram(requestParameters: NotificationCreateTelegramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationCreateTelegramRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationOneRaw(requestParameters: NotificationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling notificationOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['notificationId'] != null) {
            queryParameters['notificationId'] = requestParameters['notificationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationOne(requestParameters: NotificationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationReceiveNotificationRaw(requestParameters: NotificationReceiveNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationReceiveNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationReceiveNotificationRequest',
                'Required parameter "notificationReceiveNotificationRequest" was null or undefined when calling notificationReceiveNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.receiveNotification`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationReceiveNotificationRequestToJSON(requestParameters['notificationReceiveNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationReceiveNotification(requestParameters: NotificationReceiveNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationReceiveNotificationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationRemoveRaw(requestParameters: NotificationRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationRemoveRequest',
                'Required parameter "notificationRemoveRequest" was null or undefined when calling notificationRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationRemoveRequestToJSON(requestParameters['notificationRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationRemove(requestParameters: NotificationRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationTestDiscordConnectionRaw(requestParameters: NotificationTestDiscordConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationTestDiscordConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTestDiscordConnectionRequest',
                'Required parameter "notificationTestDiscordConnectionRequest" was null or undefined when calling notificationTestDiscordConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.testDiscordConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTestDiscordConnectionRequestToJSON(requestParameters['notificationTestDiscordConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationTestDiscordConnection(requestParameters: NotificationTestDiscordConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationTestDiscordConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationTestEmailConnectionRaw(requestParameters: NotificationTestEmailConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationTestEmailConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTestEmailConnectionRequest',
                'Required parameter "notificationTestEmailConnectionRequest" was null or undefined when calling notificationTestEmailConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.testEmailConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTestEmailConnectionRequestToJSON(requestParameters['notificationTestEmailConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationTestEmailConnection(requestParameters: NotificationTestEmailConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationTestEmailConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationTestGotifyConnectionRaw(requestParameters: NotificationTestGotifyConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationTestGotifyConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTestGotifyConnectionRequest',
                'Required parameter "notificationTestGotifyConnectionRequest" was null or undefined when calling notificationTestGotifyConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.testGotifyConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTestGotifyConnectionRequestToJSON(requestParameters['notificationTestGotifyConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationTestGotifyConnection(requestParameters: NotificationTestGotifyConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationTestGotifyConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationTestSlackConnectionRaw(requestParameters: NotificationTestSlackConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationTestSlackConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTestSlackConnectionRequest',
                'Required parameter "notificationTestSlackConnectionRequest" was null or undefined when calling notificationTestSlackConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.testSlackConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTestSlackConnectionRequestToJSON(requestParameters['notificationTestSlackConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationTestSlackConnection(requestParameters: NotificationTestSlackConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationTestSlackConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationTestTelegramConnectionRaw(requestParameters: NotificationTestTelegramConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationTestTelegramConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationTestTelegramConnectionRequest',
                'Required parameter "notificationTestTelegramConnectionRequest" was null or undefined when calling notificationTestTelegramConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.testTelegramConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationTestTelegramConnectionRequestToJSON(requestParameters['notificationTestTelegramConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationTestTelegramConnection(requestParameters: NotificationTestTelegramConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationTestTelegramConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationUpdateDiscordRaw(requestParameters: NotificationUpdateDiscordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationUpdateDiscordRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationUpdateDiscordRequest',
                'Required parameter "notificationUpdateDiscordRequest" was null or undefined when calling notificationUpdateDiscord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.updateDiscord`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationUpdateDiscordRequestToJSON(requestParameters['notificationUpdateDiscordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationUpdateDiscord(requestParameters: NotificationUpdateDiscordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationUpdateDiscordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationUpdateEmailRaw(requestParameters: NotificationUpdateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationUpdateEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationUpdateEmailRequest',
                'Required parameter "notificationUpdateEmailRequest" was null or undefined when calling notificationUpdateEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.updateEmail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationUpdateEmailRequestToJSON(requestParameters['notificationUpdateEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationUpdateEmail(requestParameters: NotificationUpdateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationUpdateEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationUpdateGotifyRaw(requestParameters: NotificationUpdateGotifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationUpdateGotifyRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationUpdateGotifyRequest',
                'Required parameter "notificationUpdateGotifyRequest" was null or undefined when calling notificationUpdateGotify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.updateGotify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationUpdateGotifyRequestToJSON(requestParameters['notificationUpdateGotifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationUpdateGotify(requestParameters: NotificationUpdateGotifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationUpdateGotifyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationUpdateSlackRaw(requestParameters: NotificationUpdateSlackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationUpdateSlackRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationUpdateSlackRequest',
                'Required parameter "notificationUpdateSlackRequest" was null or undefined when calling notificationUpdateSlack().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.updateSlack`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationUpdateSlackRequestToJSON(requestParameters['notificationUpdateSlackRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationUpdateSlack(requestParameters: NotificationUpdateSlackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationUpdateSlackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async notificationUpdateTelegramRaw(requestParameters: NotificationUpdateTelegramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationUpdateTelegramRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationUpdateTelegramRequest',
                'Required parameter "notificationUpdateTelegramRequest" was null or undefined when calling notificationUpdateTelegram().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/notification.updateTelegram`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationUpdateTelegramRequestToJSON(requestParameters['notificationUpdateTelegramRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async notificationUpdateTelegram(requestParameters: NotificationUpdateTelegramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationUpdateTelegramRaw(requestParameters, initOverrides);
    }

}
