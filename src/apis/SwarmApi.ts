/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface SwarmGetAppInfosRequest {
    appName: string;
    serverId?: string;
}

export interface SwarmGetNodeAppsRequest {
    serverId?: string;
}

export interface SwarmGetNodeInfoRequest {
    nodeId: string;
    serverId?: string;
}

export interface SwarmGetNodesRequest {
    serverId?: string;
}

/**
 * 
 */
export class SwarmApi extends runtime.BaseAPI {

    /**
     */
    async swarmGetAppInfosRaw(requestParameters: SwarmGetAppInfosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling swarmGetAppInfos().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/swarm.getAppInfos`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async swarmGetAppInfos(requestParameters: SwarmGetAppInfosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.swarmGetAppInfosRaw(requestParameters, initOverrides);
    }

    /**
     */
    async swarmGetNodeAppsRaw(requestParameters: SwarmGetNodeAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/swarm.getNodeApps`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async swarmGetNodeApps(requestParameters: SwarmGetNodeAppsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.swarmGetNodeAppsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async swarmGetNodeInfoRaw(requestParameters: SwarmGetNodeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling swarmGetNodeInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nodeId'] != null) {
            queryParameters['nodeId'] = requestParameters['nodeId'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/swarm.getNodeInfo`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async swarmGetNodeInfo(requestParameters: SwarmGetNodeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.swarmGetNodeInfoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async swarmGetNodesRaw(requestParameters: SwarmGetNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/swarm.getNodes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async swarmGetNodes(requestParameters: SwarmGetNodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.swarmGetNodesRaw(requestParameters, initOverrides);
    }

}
