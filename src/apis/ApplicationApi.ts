/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationCreateRequest,
  ApplicationDeleteRequest,
  ApplicationMoveRequest,
  ApplicationReloadRequest,
  ApplicationSaveBitbucketProviderRequest,
  ApplicationSaveBuildTypeRequest,
  ApplicationSaveDockerProviderRequest,
  ApplicationSaveEnvironmentRequest,
  ApplicationSaveGitProdiverRequest,
  ApplicationSaveGiteaProviderRequest,
  ApplicationSaveGithubProviderRequest,
  ApplicationSaveGitlabProviderRequest,
  ApplicationUpdateRequest,
  ApplicationUpdateTraefikConfigRequest,
  InlineObject,
} from '../models/index';
import {
    ApplicationCreateRequestFromJSON,
    ApplicationCreateRequestToJSON,
    ApplicationDeleteRequestFromJSON,
    ApplicationDeleteRequestToJSON,
    ApplicationMoveRequestFromJSON,
    ApplicationMoveRequestToJSON,
    ApplicationReloadRequestFromJSON,
    ApplicationReloadRequestToJSON,
    ApplicationSaveBitbucketProviderRequestFromJSON,
    ApplicationSaveBitbucketProviderRequestToJSON,
    ApplicationSaveBuildTypeRequestFromJSON,
    ApplicationSaveBuildTypeRequestToJSON,
    ApplicationSaveDockerProviderRequestFromJSON,
    ApplicationSaveDockerProviderRequestToJSON,
    ApplicationSaveEnvironmentRequestFromJSON,
    ApplicationSaveEnvironmentRequestToJSON,
    ApplicationSaveGitProdiverRequestFromJSON,
    ApplicationSaveGitProdiverRequestToJSON,
    ApplicationSaveGiteaProviderRequestFromJSON,
    ApplicationSaveGiteaProviderRequestToJSON,
    ApplicationSaveGithubProviderRequestFromJSON,
    ApplicationSaveGithubProviderRequestToJSON,
    ApplicationSaveGitlabProviderRequestFromJSON,
    ApplicationSaveGitlabProviderRequestToJSON,
    ApplicationUpdateRequestFromJSON,
    ApplicationUpdateRequestToJSON,
    ApplicationUpdateTraefikConfigRequestFromJSON,
    ApplicationUpdateTraefikConfigRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface ApplicationCleanQueuesRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationCreateOperationRequest {
    applicationCreateRequest: ApplicationCreateRequest;
}

export interface ApplicationDeleteOperationRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationDeployRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationMarkRunningRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationMoveOperationRequest {
    applicationMoveRequest: ApplicationMoveRequest;
}

export interface ApplicationOneRequest {
    applicationId: string;
}

export interface ApplicationReadAppMonitoringRequest {
    appName: string;
}

export interface ApplicationReadTraefikConfigRequest {
    applicationId: string;
}

export interface ApplicationRedeployRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationRefreshTokenRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationReloadOperationRequest {
    applicationReloadRequest: ApplicationReloadRequest;
}

export interface ApplicationSaveBitbucketProviderOperationRequest {
    applicationSaveBitbucketProviderRequest: ApplicationSaveBitbucketProviderRequest;
}

export interface ApplicationSaveBuildTypeOperationRequest {
    applicationSaveBuildTypeRequest: ApplicationSaveBuildTypeRequest;
}

export interface ApplicationSaveDockerProviderOperationRequest {
    applicationSaveDockerProviderRequest: ApplicationSaveDockerProviderRequest;
}

export interface ApplicationSaveEnvironmentOperationRequest {
    applicationSaveEnvironmentRequest: ApplicationSaveEnvironmentRequest;
}

export interface ApplicationSaveGitProdiverOperationRequest {
    applicationSaveGitProdiverRequest: ApplicationSaveGitProdiverRequest;
}

export interface ApplicationSaveGiteaProviderOperationRequest {
    applicationSaveGiteaProviderRequest: ApplicationSaveGiteaProviderRequest;
}

export interface ApplicationSaveGithubProviderOperationRequest {
    applicationSaveGithubProviderRequest: ApplicationSaveGithubProviderRequest;
}

export interface ApplicationSaveGitlabProviderOperationRequest {
    applicationSaveGitlabProviderRequest: ApplicationSaveGitlabProviderRequest;
}

export interface ApplicationStartRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationStopRequest {
    applicationDeleteRequest: ApplicationDeleteRequest;
}

export interface ApplicationUpdateOperationRequest {
    applicationUpdateRequest: ApplicationUpdateRequest;
}

export interface ApplicationUpdateTraefikConfigOperationRequest {
    applicationUpdateTraefikConfigRequest: ApplicationUpdateTraefikConfigRequest;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     */
    async applicationCleanQueuesRaw(requestParameters: ApplicationCleanQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationCleanQueues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.cleanQueues`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationCleanQueues(requestParameters: ApplicationCleanQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationCleanQueuesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationCreateRaw(requestParameters: ApplicationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationCreateRequest',
                'Required parameter "applicationCreateRequest" was null or undefined when calling applicationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCreateRequestToJSON(requestParameters['applicationCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationCreate(requestParameters: ApplicationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationDeleteRaw(requestParameters: ApplicationDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationDelete(requestParameters: ApplicationDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationDeployRaw(requestParameters: ApplicationDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationDeploy(requestParameters: ApplicationDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationMarkRunningRaw(requestParameters: ApplicationMarkRunningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationMarkRunning().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.markRunning`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationMarkRunning(requestParameters: ApplicationMarkRunningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationMarkRunningRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationMoveRaw(requestParameters: ApplicationMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationMoveRequest',
                'Required parameter "applicationMoveRequest" was null or undefined when calling applicationMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationMoveRequestToJSON(requestParameters['applicationMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationMove(requestParameters: ApplicationMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationOneRaw(requestParameters: ApplicationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationOne(requestParameters: ApplicationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationReadAppMonitoringRaw(requestParameters: ApplicationReadAppMonitoringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling applicationReadAppMonitoring().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.readAppMonitoring`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationReadAppMonitoring(requestParameters: ApplicationReadAppMonitoringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationReadAppMonitoringRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationReadTraefikConfigRaw(requestParameters: ApplicationReadTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationReadTraefikConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.readTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationReadTraefikConfig(requestParameters: ApplicationReadTraefikConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationReadTraefikConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationRedeployRaw(requestParameters: ApplicationRedeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationRedeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.redeploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationRedeploy(requestParameters: ApplicationRedeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationRedeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationRefreshTokenRaw(requestParameters: ApplicationRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationRefreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.refreshToken`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationRefreshToken(requestParameters: ApplicationRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationRefreshTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationReloadRaw(requestParameters: ApplicationReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationReloadRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationReloadRequest',
                'Required parameter "applicationReloadRequest" was null or undefined when calling applicationReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.reload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationReloadRequestToJSON(requestParameters['applicationReloadRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationReload(requestParameters: ApplicationReloadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationReloadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveBitbucketProviderRaw(requestParameters: ApplicationSaveBitbucketProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveBitbucketProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveBitbucketProviderRequest',
                'Required parameter "applicationSaveBitbucketProviderRequest" was null or undefined when calling applicationSaveBitbucketProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveBitbucketProvider`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveBitbucketProviderRequestToJSON(requestParameters['applicationSaveBitbucketProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveBitbucketProvider(requestParameters: ApplicationSaveBitbucketProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveBitbucketProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveBuildTypeRaw(requestParameters: ApplicationSaveBuildTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveBuildTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveBuildTypeRequest',
                'Required parameter "applicationSaveBuildTypeRequest" was null or undefined when calling applicationSaveBuildType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveBuildType`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveBuildTypeRequestToJSON(requestParameters['applicationSaveBuildTypeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveBuildType(requestParameters: ApplicationSaveBuildTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveBuildTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveDockerProviderRaw(requestParameters: ApplicationSaveDockerProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveDockerProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveDockerProviderRequest',
                'Required parameter "applicationSaveDockerProviderRequest" was null or undefined when calling applicationSaveDockerProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveDockerProvider`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveDockerProviderRequestToJSON(requestParameters['applicationSaveDockerProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveDockerProvider(requestParameters: ApplicationSaveDockerProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveDockerProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveEnvironmentRaw(requestParameters: ApplicationSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveEnvironmentRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveEnvironmentRequest',
                'Required parameter "applicationSaveEnvironmentRequest" was null or undefined when calling applicationSaveEnvironment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveEnvironment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveEnvironmentRequestToJSON(requestParameters['applicationSaveEnvironmentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveEnvironment(requestParameters: ApplicationSaveEnvironmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveGitProdiverRaw(requestParameters: ApplicationSaveGitProdiverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveGitProdiverRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveGitProdiverRequest',
                'Required parameter "applicationSaveGitProdiverRequest" was null or undefined when calling applicationSaveGitProdiver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveGitProdiver`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveGitProdiverRequestToJSON(requestParameters['applicationSaveGitProdiverRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveGitProdiver(requestParameters: ApplicationSaveGitProdiverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveGitProdiverRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveGiteaProviderRaw(requestParameters: ApplicationSaveGiteaProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveGiteaProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveGiteaProviderRequest',
                'Required parameter "applicationSaveGiteaProviderRequest" was null or undefined when calling applicationSaveGiteaProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveGiteaProvider`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveGiteaProviderRequestToJSON(requestParameters['applicationSaveGiteaProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveGiteaProvider(requestParameters: ApplicationSaveGiteaProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveGiteaProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveGithubProviderRaw(requestParameters: ApplicationSaveGithubProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveGithubProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveGithubProviderRequest',
                'Required parameter "applicationSaveGithubProviderRequest" was null or undefined when calling applicationSaveGithubProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveGithubProvider`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveGithubProviderRequestToJSON(requestParameters['applicationSaveGithubProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveGithubProvider(requestParameters: ApplicationSaveGithubProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveGithubProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationSaveGitlabProviderRaw(requestParameters: ApplicationSaveGitlabProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationSaveGitlabProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationSaveGitlabProviderRequest',
                'Required parameter "applicationSaveGitlabProviderRequest" was null or undefined when calling applicationSaveGitlabProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.saveGitlabProvider`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSaveGitlabProviderRequestToJSON(requestParameters['applicationSaveGitlabProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationSaveGitlabProvider(requestParameters: ApplicationSaveGitlabProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationSaveGitlabProviderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationStartRaw(requestParameters: ApplicationStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationStart(requestParameters: ApplicationStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationStopRaw(requestParameters: ApplicationStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationDeleteRequest',
                'Required parameter "applicationDeleteRequest" was null or undefined when calling applicationStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDeleteRequestToJSON(requestParameters['applicationDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationStop(requestParameters: ApplicationStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationUpdateRaw(requestParameters: ApplicationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationUpdateRequest',
                'Required parameter "applicationUpdateRequest" was null or undefined when calling applicationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationUpdateRequestToJSON(requestParameters['applicationUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationUpdate(requestParameters: ApplicationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationUpdateTraefikConfigRaw(requestParameters: ApplicationUpdateTraefikConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationUpdateTraefikConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationUpdateTraefikConfigRequest',
                'Required parameter "applicationUpdateTraefikConfigRequest" was null or undefined when calling applicationUpdateTraefikConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/application.updateTraefikConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationUpdateTraefikConfigRequestToJSON(requestParameters['applicationUpdateTraefikConfigRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationUpdateTraefikConfig(requestParameters: ApplicationUpdateTraefikConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationUpdateTraefikConfigRaw(requestParameters, initOverrides);
    }

}
