/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GitlabCreateRequest,
  GitlabTestConnectionRequest,
  GitlabUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    GitlabCreateRequestFromJSON,
    GitlabCreateRequestToJSON,
    GitlabTestConnectionRequestFromJSON,
    GitlabTestConnectionRequestToJSON,
    GitlabUpdateRequestFromJSON,
    GitlabUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface GitlabCreateOperationRequest {
    gitlabCreateRequest: GitlabCreateRequest;
}

export interface GitlabGetGitlabBranchesRequest {
    owner: string;
    repo: string;
    id?: number;
    gitlabId?: string;
}

export interface GitlabGetGitlabRepositoriesRequest {
    gitlabId: string;
}

export interface GitlabOneRequest {
    gitlabId: string;
}

export interface GitlabTestConnectionOperationRequest {
    gitlabTestConnectionRequest: GitlabTestConnectionRequest;
}

export interface GitlabUpdateOperationRequest {
    gitlabUpdateRequest: GitlabUpdateRequest;
}

/**
 * 
 */
export class GitlabApi extends runtime.BaseAPI {

    /**
     */
    async gitlabCreateRaw(requestParameters: GitlabCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitlabCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'gitlabCreateRequest',
                'Required parameter "gitlabCreateRequest" was null or undefined when calling gitlabCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GitlabCreateRequestToJSON(requestParameters['gitlabCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabCreate(requestParameters: GitlabCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitlabGetGitlabBranchesRaw(requestParameters: GitlabGetGitlabBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling gitlabGetGitlabBranches().'
            );
        }

        if (requestParameters['repo'] == null) {
            throw new runtime.RequiredError(
                'repo',
                'Required parameter "repo" was null or undefined when calling gitlabGetGitlabBranches().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['repo'] != null) {
            queryParameters['repo'] = requestParameters['repo'];
        }

        if (requestParameters['gitlabId'] != null) {
            queryParameters['gitlabId'] = requestParameters['gitlabId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.getGitlabBranches`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabGetGitlabBranches(requestParameters: GitlabGetGitlabBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabGetGitlabBranchesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitlabGetGitlabRepositoriesRaw(requestParameters: GitlabGetGitlabRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitlabId'] == null) {
            throw new runtime.RequiredError(
                'gitlabId',
                'Required parameter "gitlabId" was null or undefined when calling gitlabGetGitlabRepositories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['gitlabId'] != null) {
            queryParameters['gitlabId'] = requestParameters['gitlabId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.getGitlabRepositories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabGetGitlabRepositories(requestParameters: GitlabGetGitlabRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabGetGitlabRepositoriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitlabGitlabProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.gitlabProviders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabGitlabProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabGitlabProvidersRaw(initOverrides);
    }

    /**
     */
    async gitlabOneRaw(requestParameters: GitlabOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitlabId'] == null) {
            throw new runtime.RequiredError(
                'gitlabId',
                'Required parameter "gitlabId" was null or undefined when calling gitlabOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['gitlabId'] != null) {
            queryParameters['gitlabId'] = requestParameters['gitlabId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabOne(requestParameters: GitlabOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitlabTestConnectionRaw(requestParameters: GitlabTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitlabTestConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'gitlabTestConnectionRequest',
                'Required parameter "gitlabTestConnectionRequest" was null or undefined when calling gitlabTestConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.testConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GitlabTestConnectionRequestToJSON(requestParameters['gitlabTestConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabTestConnection(requestParameters: GitlabTestConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabTestConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitlabUpdateRaw(requestParameters: GitlabUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitlabUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'gitlabUpdateRequest',
                'Required parameter "gitlabUpdateRequest" was null or undefined when calling gitlabUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/gitlab.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GitlabUpdateRequestToJSON(requestParameters['gitlabUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitlabUpdate(requestParameters: GitlabUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitlabUpdateRaw(requestParameters, initOverrides);
    }

}
