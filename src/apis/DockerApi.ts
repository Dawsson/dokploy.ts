/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DockerGetContainersByAppNameMatchAppTypeParameter,
  DockerRestartContainerRequest,
  InlineObject,
} from '../models/index';
import {
    DockerGetContainersByAppNameMatchAppTypeParameterFromJSON,
    DockerGetContainersByAppNameMatchAppTypeParameterToJSON,
    DockerRestartContainerRequestFromJSON,
    DockerRestartContainerRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface DockerGetConfigRequest {
    containerId: string;
    serverId?: string;
}

export interface DockerGetContainersRequest {
    serverId?: string;
}

export interface DockerGetContainersByAppLabelRequest {
    appName: string;
    type: DockerGetContainersByAppLabelTypeEnum;
    serverId?: string;
}

export interface DockerGetContainersByAppNameMatchRequest {
    appName: string;
    appType?: DockerGetContainersByAppNameMatchAppTypeParameter;
    serverId?: string;
}

export interface DockerGetServiceContainersByAppNameRequest {
    appName: string;
    serverId?: string;
}

export interface DockerGetStackContainersByAppNameRequest {
    appName: string;
    serverId?: string;
}

export interface DockerRestartContainerOperationRequest {
    dockerRestartContainerRequest: DockerRestartContainerRequest;
}

/**
 * 
 */
export class DockerApi extends runtime.BaseAPI {

    /**
     */
    async dockerGetConfigRaw(requestParameters: DockerGetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['containerId'] == null) {
            throw new runtime.RequiredError(
                'containerId',
                'Required parameter "containerId" was null or undefined when calling dockerGetConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['containerId'] != null) {
            queryParameters['containerId'] = requestParameters['containerId'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetConfig(requestParameters: DockerGetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerGetContainersRaw(requestParameters: DockerGetContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getContainers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetContainers(requestParameters: DockerGetContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetContainersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerGetContainersByAppLabelRaw(requestParameters: DockerGetContainersByAppLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling dockerGetContainersByAppLabel().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling dockerGetContainersByAppLabel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getContainersByAppLabel`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetContainersByAppLabel(requestParameters: DockerGetContainersByAppLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetContainersByAppLabelRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerGetContainersByAppNameMatchRaw(requestParameters: DockerGetContainersByAppNameMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling dockerGetContainersByAppNameMatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appType'] != null) {
            queryParameters['appType'] = requestParameters['appType'];
        }

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getContainersByAppNameMatch`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetContainersByAppNameMatch(requestParameters: DockerGetContainersByAppNameMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetContainersByAppNameMatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerGetServiceContainersByAppNameRaw(requestParameters: DockerGetServiceContainersByAppNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling dockerGetServiceContainersByAppName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getServiceContainersByAppName`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetServiceContainersByAppName(requestParameters: DockerGetServiceContainersByAppNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetServiceContainersByAppNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerGetStackContainersByAppNameRaw(requestParameters: DockerGetStackContainersByAppNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling dockerGetStackContainersByAppName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appName'] != null) {
            queryParameters['appName'] = requestParameters['appName'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.getStackContainersByAppName`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerGetStackContainersByAppName(requestParameters: DockerGetStackContainersByAppNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerGetStackContainersByAppNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dockerRestartContainerRaw(requestParameters: DockerRestartContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dockerRestartContainerRequest'] == null) {
            throw new runtime.RequiredError(
                'dockerRestartContainerRequest',
                'Required parameter "dockerRestartContainerRequest" was null or undefined when calling dockerRestartContainer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/docker.restartContainer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DockerRestartContainerRequestToJSON(requestParameters['dockerRestartContainerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dockerRestartContainer(requestParameters: DockerRestartContainerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dockerRestartContainerRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const DockerGetContainersByAppLabelTypeEnum = {
    Standalone: 'standalone',
    Swarm: 'swarm'
} as const;
export type DockerGetContainersByAppLabelTypeEnum = typeof DockerGetContainersByAppLabelTypeEnum[keyof typeof DockerGetContainersByAppLabelTypeEnum];
