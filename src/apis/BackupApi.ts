/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BackupCreateRequest,
  BackupRemoveRequest,
  BackupUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    BackupCreateRequestFromJSON,
    BackupCreateRequestToJSON,
    BackupRemoveRequestFromJSON,
    BackupRemoveRequestToJSON,
    BackupUpdateRequestFromJSON,
    BackupUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface BackupCreateOperationRequest {
    backupCreateRequest: BackupCreateRequest;
}

export interface BackupListBackupFilesRequest {
    destinationId: string;
    search: string;
    serverId?: string;
}

export interface BackupManualBackupComposeRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupManualBackupMariadbRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupManualBackupMongoRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupManualBackupMySqlRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupManualBackupPostgresRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupManualBackupWebServerRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupOneRequest {
    backupId: string;
}

export interface BackupRemoveOperationRequest {
    backupRemoveRequest: BackupRemoveRequest;
}

export interface BackupUpdateOperationRequest {
    backupUpdateRequest: BackupUpdateRequest;
}

/**
 * 
 */
export class BackupApi extends runtime.BaseAPI {

    /**
     */
    async backupCreateRaw(requestParameters: BackupCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'backupCreateRequest',
                'Required parameter "backupCreateRequest" was null or undefined when calling backupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupCreateRequestToJSON(requestParameters['backupCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupCreate(requestParameters: BackupCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupListBackupFilesRaw(requestParameters: BackupListBackupFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationId'] == null) {
            throw new runtime.RequiredError(
                'destinationId',
                'Required parameter "destinationId" was null or undefined when calling backupListBackupFiles().'
            );
        }

        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling backupListBackupFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['destinationId'] != null) {
            queryParameters['destinationId'] = requestParameters['destinationId'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.listBackupFiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupListBackupFiles(requestParameters: BackupListBackupFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupListBackupFilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupComposeRaw(requestParameters: BackupManualBackupComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupCompose().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupCompose`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupCompose(requestParameters: BackupManualBackupComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupComposeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupMariadbRaw(requestParameters: BackupManualBackupMariadbRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupMariadb().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupMariadb`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupMariadb(requestParameters: BackupManualBackupMariadbRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupMariadbRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupMongoRaw(requestParameters: BackupManualBackupMongoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupMongo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupMongo`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupMongo(requestParameters: BackupManualBackupMongoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupMongoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupMySqlRaw(requestParameters: BackupManualBackupMySqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupMySql().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupMySql`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupMySql(requestParameters: BackupManualBackupMySqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupMySqlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupPostgresRaw(requestParameters: BackupManualBackupPostgresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupPostgres().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupPostgres`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupPostgres(requestParameters: BackupManualBackupPostgresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupPostgresRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupManualBackupWebServerRaw(requestParameters: BackupManualBackupWebServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupManualBackupWebServer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.manualBackupWebServer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupManualBackupWebServer(requestParameters: BackupManualBackupWebServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupManualBackupWebServerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupOneRaw(requestParameters: BackupOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupId'] == null) {
            throw new runtime.RequiredError(
                'backupId',
                'Required parameter "backupId" was null or undefined when calling backupOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['backupId'] != null) {
            queryParameters['backupId'] = requestParameters['backupId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupOne(requestParameters: BackupOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupRemoveRaw(requestParameters: BackupRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRemoveRequest',
                'Required parameter "backupRemoveRequest" was null or undefined when calling backupRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRemoveRequestToJSON(requestParameters['backupRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupRemove(requestParameters: BackupRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async backupUpdateRaw(requestParameters: BackupUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['backupUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'backupUpdateRequest',
                'Required parameter "backupUpdateRequest" was null or undefined when calling backupUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/backup.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupUpdateRequestToJSON(requestParameters['backupUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async backupUpdate(requestParameters: BackupUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.backupUpdateRaw(requestParameters, initOverrides);
    }

}
