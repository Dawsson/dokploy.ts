/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  MountsCreateRequest,
  MountsRemoveRequest,
  MountsUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    MountsCreateRequestFromJSON,
    MountsCreateRequestToJSON,
    MountsRemoveRequestFromJSON,
    MountsRemoveRequestToJSON,
    MountsUpdateRequestFromJSON,
    MountsUpdateRequestToJSON,
} from '../models/index';

export interface MountsCreateOperationRequest {
    mountsCreateRequest: MountsCreateRequest;
}

export interface MountsOneRequest {
    mountId: string;
}

export interface MountsRemoveOperationRequest {
    mountsRemoveRequest: MountsRemoveRequest;
}

export interface MountsUpdateOperationRequest {
    mountsUpdateRequest: MountsUpdateRequest;
}

/**
 * 
 */
export class MountsApi extends runtime.BaseAPI {

    /**
     */
    async mountsCreateRaw(requestParameters: MountsCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mountsCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'mountsCreateRequest',
                'Required parameter "mountsCreateRequest" was null or undefined when calling mountsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mounts.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MountsCreateRequestToJSON(requestParameters['mountsCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsCreate(requestParameters: MountsCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mountsCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mountsOneRaw(requestParameters: MountsOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mountId'] == null) {
            throw new runtime.RequiredError(
                'mountId',
                'Required parameter "mountId" was null or undefined when calling mountsOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mountId'] != null) {
            queryParameters['mountId'] = requestParameters['mountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mounts.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsOne(requestParameters: MountsOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mountsOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mountsRemoveRaw(requestParameters: MountsRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mountsRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'mountsRemoveRequest',
                'Required parameter "mountsRemoveRequest" was null or undefined when calling mountsRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mounts.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MountsRemoveRequestToJSON(requestParameters['mountsRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsRemove(requestParameters: MountsRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mountsRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async mountsUpdateRaw(requestParameters: MountsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mountsUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'mountsUpdateRequest',
                'Required parameter "mountsUpdateRequest" was null or undefined when calling mountsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/mounts.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MountsUpdateRequestToJSON(requestParameters['mountsUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mountsUpdate(requestParameters: MountsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mountsUpdateRaw(requestParameters, initOverrides);
    }

}
