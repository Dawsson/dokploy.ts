/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  PortCreateRequest,
  PortDeleteRequest,
  PortUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    PortCreateRequestFromJSON,
    PortCreateRequestToJSON,
    PortDeleteRequestFromJSON,
    PortDeleteRequestToJSON,
    PortUpdateRequestFromJSON,
    PortUpdateRequestToJSON,
} from '../models/index';

export interface PortCreateOperationRequest {
    portCreateRequest: PortCreateRequest;
}

export interface PortDeleteOperationRequest {
    portDeleteRequest: PortDeleteRequest;
}

export interface PortOneRequest {
    portId: string;
}

export interface PortUpdateOperationRequest {
    portUpdateRequest: PortUpdateRequest;
}

/**
 * 
 */
export class PortApi extends runtime.BaseAPI {

    /**
     */
    async portCreateRaw(requestParameters: PortCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['portCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'portCreateRequest',
                'Required parameter "portCreateRequest" was null or undefined when calling portCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/port.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortCreateRequestToJSON(requestParameters['portCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async portCreate(requestParameters: PortCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async portDeleteRaw(requestParameters: PortDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['portDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'portDeleteRequest',
                'Required parameter "portDeleteRequest" was null or undefined when calling portDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/port.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortDeleteRequestToJSON(requestParameters['portDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async portDelete(requestParameters: PortDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async portOneRaw(requestParameters: PortOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['portId'] == null) {
            throw new runtime.RequiredError(
                'portId',
                'Required parameter "portId" was null or undefined when calling portOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['portId'] != null) {
            queryParameters['portId'] = requestParameters['portId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/port.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async portOne(requestParameters: PortOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async portUpdateRaw(requestParameters: PortUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['portUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'portUpdateRequest',
                'Required parameter "portUpdateRequest" was null or undefined when calling portUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/port.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortUpdateRequestToJSON(requestParameters['portUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async portUpdate(requestParameters: PortUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.portUpdateRaw(requestParameters, initOverrides);
    }

}
