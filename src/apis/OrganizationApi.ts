/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  OrganizationCreateRequest,
  OrganizationRemoveInvitationRequest,
  OrganizationUpdateRequest,
  UserCreateApiKeyRequestMetadata,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    OrganizationCreateRequestFromJSON,
    OrganizationCreateRequestToJSON,
    OrganizationRemoveInvitationRequestFromJSON,
    OrganizationRemoveInvitationRequestToJSON,
    OrganizationUpdateRequestFromJSON,
    OrganizationUpdateRequestToJSON,
    UserCreateApiKeyRequestMetadataFromJSON,
    UserCreateApiKeyRequestMetadataToJSON,
} from '../models/index';

export interface OrganizationCreateOperationRequest {
    organizationCreateRequest: OrganizationCreateRequest;
}

export interface OrganizationDeleteRequest {
    userCreateApiKeyRequestMetadata: UserCreateApiKeyRequestMetadata;
}

export interface OrganizationOneRequest {
    organizationId: string;
}

export interface OrganizationRemoveInvitationOperationRequest {
    organizationRemoveInvitationRequest: OrganizationRemoveInvitationRequest;
}

export interface OrganizationUpdateOperationRequest {
    organizationUpdateRequest: OrganizationUpdateRequest;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     */
    async organizationAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationAllRaw(initOverrides);
    }

    /**
     */
    async organizationAllInvitationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.allInvitations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationAllInvitations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationAllInvitationsRaw(initOverrides);
    }

    /**
     */
    async organizationCreateRaw(requestParameters: OrganizationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'organizationCreateRequest',
                'Required parameter "organizationCreateRequest" was null or undefined when calling organizationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationCreateRequestToJSON(requestParameters['organizationCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationCreate(requestParameters: OrganizationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationDeleteRaw(requestParameters: OrganizationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userCreateApiKeyRequestMetadata'] == null) {
            throw new runtime.RequiredError(
                'userCreateApiKeyRequestMetadata',
                'Required parameter "userCreateApiKeyRequestMetadata" was null or undefined when calling organizationDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateApiKeyRequestMetadataToJSON(requestParameters['userCreateApiKeyRequestMetadata']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationDelete(requestParameters: OrganizationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationOneRaw(requestParameters: OrganizationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationOne(requestParameters: OrganizationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationRemoveInvitationRaw(requestParameters: OrganizationRemoveInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationRemoveInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'organizationRemoveInvitationRequest',
                'Required parameter "organizationRemoveInvitationRequest" was null or undefined when calling organizationRemoveInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.removeInvitation`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationRemoveInvitationRequestToJSON(requestParameters['organizationRemoveInvitationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationRemoveInvitation(requestParameters: OrganizationRemoveInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationRemoveInvitationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationUpdateRaw(requestParameters: OrganizationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'organizationUpdateRequest',
                'Required parameter "organizationUpdateRequest" was null or undefined when calling organizationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/organization.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationUpdateRequestToJSON(requestParameters['organizationUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationUpdate(requestParameters: OrganizationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationUpdateRaw(requestParameters, initOverrides);
    }

}
