/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestinationCreateRequest,
  DestinationRemoveRequest,
  DestinationUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    DestinationCreateRequestFromJSON,
    DestinationCreateRequestToJSON,
    DestinationRemoveRequestFromJSON,
    DestinationRemoveRequestToJSON,
    DestinationUpdateRequestFromJSON,
    DestinationUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface DestinationCreateOperationRequest {
    destinationCreateRequest: DestinationCreateRequest;
}

export interface DestinationOneRequest {
    destinationId: string;
}

export interface DestinationRemoveOperationRequest {
    destinationRemoveRequest: DestinationRemoveRequest;
}

export interface DestinationTestConnectionRequest {
    destinationCreateRequest: DestinationCreateRequest;
}

export interface DestinationUpdateOperationRequest {
    destinationUpdateRequest: DestinationUpdateRequest;
}

/**
 * 
 */
export class DestinationApi extends runtime.BaseAPI {

    /**
     */
    async destinationAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationAllRaw(initOverrides);
    }

    /**
     */
    async destinationCreateRaw(requestParameters: DestinationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'destinationCreateRequest',
                'Required parameter "destinationCreateRequest" was null or undefined when calling destinationCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCreateRequestToJSON(requestParameters['destinationCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationCreate(requestParameters: DestinationCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async destinationOneRaw(requestParameters: DestinationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationId'] == null) {
            throw new runtime.RequiredError(
                'destinationId',
                'Required parameter "destinationId" was null or undefined when calling destinationOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['destinationId'] != null) {
            queryParameters['destinationId'] = requestParameters['destinationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationOne(requestParameters: DestinationOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async destinationRemoveRaw(requestParameters: DestinationRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationRemoveRequest'] == null) {
            throw new runtime.RequiredError(
                'destinationRemoveRequest',
                'Required parameter "destinationRemoveRequest" was null or undefined when calling destinationRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationRemoveRequestToJSON(requestParameters['destinationRemoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationRemove(requestParameters: DestinationRemoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async destinationTestConnectionRaw(requestParameters: DestinationTestConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'destinationCreateRequest',
                'Required parameter "destinationCreateRequest" was null or undefined when calling destinationTestConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.testConnection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCreateRequestToJSON(requestParameters['destinationCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationTestConnection(requestParameters: DestinationTestConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationTestConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async destinationUpdateRaw(requestParameters: DestinationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['destinationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'destinationUpdateRequest',
                'Required parameter "destinationUpdateRequest" was null or undefined when calling destinationUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/destination.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationUpdateRequestToJSON(requestParameters['destinationUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destinationUpdate(requestParameters: DestinationUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationUpdateRaw(requestParameters, initOverrides);
    }

}
