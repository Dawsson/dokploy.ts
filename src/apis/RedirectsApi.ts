/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  RedirectsCreateRequest,
  RedirectsDeleteRequest,
  RedirectsUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RedirectsCreateRequestFromJSON,
    RedirectsCreateRequestToJSON,
    RedirectsDeleteRequestFromJSON,
    RedirectsDeleteRequestToJSON,
    RedirectsUpdateRequestFromJSON,
    RedirectsUpdateRequestToJSON,
} from '../models/index';

export interface RedirectsCreateOperationRequest {
    redirectsCreateRequest: RedirectsCreateRequest;
}

export interface RedirectsDeleteOperationRequest {
    redirectsDeleteRequest: RedirectsDeleteRequest;
}

export interface RedirectsOneRequest {
    redirectId: string;
}

export interface RedirectsUpdateOperationRequest {
    redirectsUpdateRequest: RedirectsUpdateRequest;
}

/**
 * 
 */
export class RedirectsApi extends runtime.BaseAPI {

    /**
     */
    async redirectsCreateRaw(requestParameters: RedirectsCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redirectsCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'redirectsCreateRequest',
                'Required parameter "redirectsCreateRequest" was null or undefined when calling redirectsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redirects.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedirectsCreateRequestToJSON(requestParameters['redirectsCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redirectsCreate(requestParameters: RedirectsCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectsCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redirectsDeleteRaw(requestParameters: RedirectsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redirectsDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'redirectsDeleteRequest',
                'Required parameter "redirectsDeleteRequest" was null or undefined when calling redirectsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redirects.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedirectsDeleteRequestToJSON(requestParameters['redirectsDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redirectsDelete(requestParameters: RedirectsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redirectsOneRaw(requestParameters: RedirectsOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redirectId'] == null) {
            throw new runtime.RequiredError(
                'redirectId',
                'Required parameter "redirectId" was null or undefined when calling redirectsOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['redirectId'] != null) {
            queryParameters['redirectId'] = requestParameters['redirectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redirects.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redirectsOne(requestParameters: RedirectsOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectsOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async redirectsUpdateRaw(requestParameters: RedirectsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['redirectsUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'redirectsUpdateRequest',
                'Required parameter "redirectsUpdateRequest" was null or undefined when calling redirectsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/redirects.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedirectsUpdateRequestToJSON(requestParameters['redirectsUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redirectsUpdate(requestParameters: RedirectsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectsUpdateRaw(requestParameters, initOverrides);
    }

}
