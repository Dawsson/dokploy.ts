/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComposeCleanQueuesRequest,
  ComposeCreateRequest,
  ComposeDeleteRequest,
  ComposeDeployTemplateRequest,
  ComposeMoveRequest,
  ComposeProcessTemplateRequest,
  ComposeRandomizeComposeRequest,
  ComposeUpdateRequest,
  InlineObject,
} from '../models/index';
import {
    ComposeCleanQueuesRequestFromJSON,
    ComposeCleanQueuesRequestToJSON,
    ComposeCreateRequestFromJSON,
    ComposeCreateRequestToJSON,
    ComposeDeleteRequestFromJSON,
    ComposeDeleteRequestToJSON,
    ComposeDeployTemplateRequestFromJSON,
    ComposeDeployTemplateRequestToJSON,
    ComposeMoveRequestFromJSON,
    ComposeMoveRequestToJSON,
    ComposeProcessTemplateRequestFromJSON,
    ComposeProcessTemplateRequestToJSON,
    ComposeRandomizeComposeRequestFromJSON,
    ComposeRandomizeComposeRequestToJSON,
    ComposeUpdateRequestFromJSON,
    ComposeUpdateRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models/index';

export interface ComposeCleanQueuesOperationRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeCreateOperationRequest {
    composeCreateRequest: ComposeCreateRequest;
}

export interface ComposeDeleteOperationRequest {
    composeDeleteRequest: ComposeDeleteRequest;
}

export interface ComposeDeployRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeDeployTemplateOperationRequest {
    composeDeployTemplateRequest: ComposeDeployTemplateRequest;
}

export interface ComposeFetchSourceTypeRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeGetConvertedComposeRequest {
    composeId: string;
}

export interface ComposeGetDefaultCommandRequest {
    composeId: string;
}

export interface ComposeGetTagsRequest {
    baseUrl?: string;
}

export interface ComposeImportRequest {
    composeProcessTemplateRequest: ComposeProcessTemplateRequest;
}

export interface ComposeIsolatedDeploymentRequest {
    composeRandomizeComposeRequest: ComposeRandomizeComposeRequest;
}

export interface ComposeLoadServicesRequest {
    composeId: string;
    type?: ComposeLoadServicesTypeEnum;
}

export interface ComposeMoveOperationRequest {
    composeMoveRequest: ComposeMoveRequest;
}

export interface ComposeOneRequest {
    composeId: string;
}

export interface ComposeProcessTemplateOperationRequest {
    composeProcessTemplateRequest: ComposeProcessTemplateRequest;
}

export interface ComposeRandomizeComposeOperationRequest {
    composeRandomizeComposeRequest: ComposeRandomizeComposeRequest;
}

export interface ComposeRedeployRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeRefreshTokenRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeStartRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeStopRequest {
    composeCleanQueuesRequest: ComposeCleanQueuesRequest;
}

export interface ComposeTemplatesRequest {
    baseUrl?: string;
}

export interface ComposeUpdateOperationRequest {
    composeUpdateRequest: ComposeUpdateRequest;
}

/**
 * 
 */
export class ComposeApi extends runtime.BaseAPI {

    /**
     */
    async composeCleanQueuesRaw(requestParameters: ComposeCleanQueuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeCleanQueues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.cleanQueues`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeCleanQueues(requestParameters: ComposeCleanQueuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeCleanQueuesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeCreateRaw(requestParameters: ComposeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCreateRequest',
                'Required parameter "composeCreateRequest" was null or undefined when calling composeCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCreateRequestToJSON(requestParameters['composeCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeCreate(requestParameters: ComposeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeDeleteRaw(requestParameters: ComposeDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'composeDeleteRequest',
                'Required parameter "composeDeleteRequest" was null or undefined when calling composeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeDeleteRequestToJSON(requestParameters['composeDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeDelete(requestParameters: ComposeDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeDeployRaw(requestParameters: ComposeDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeDeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.deploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeDeploy(requestParameters: ComposeDeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeDeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeDeployTemplateRaw(requestParameters: ComposeDeployTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeDeployTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'composeDeployTemplateRequest',
                'Required parameter "composeDeployTemplateRequest" was null or undefined when calling composeDeployTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.deployTemplate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeDeployTemplateRequestToJSON(requestParameters['composeDeployTemplateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeDeployTemplate(requestParameters: ComposeDeployTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeDeployTemplateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeFetchSourceTypeRaw(requestParameters: ComposeFetchSourceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeFetchSourceType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.fetchSourceType`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeFetchSourceType(requestParameters: ComposeFetchSourceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeFetchSourceTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeGetConvertedComposeRaw(requestParameters: ComposeGetConvertedComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeId'] == null) {
            throw new runtime.RequiredError(
                'composeId',
                'Required parameter "composeId" was null or undefined when calling composeGetConvertedCompose().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['composeId'] != null) {
            queryParameters['composeId'] = requestParameters['composeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.getConvertedCompose`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeGetConvertedCompose(requestParameters: ComposeGetConvertedComposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeGetConvertedComposeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeGetDefaultCommandRaw(requestParameters: ComposeGetDefaultCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeId'] == null) {
            throw new runtime.RequiredError(
                'composeId',
                'Required parameter "composeId" was null or undefined when calling composeGetDefaultCommand().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['composeId'] != null) {
            queryParameters['composeId'] = requestParameters['composeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.getDefaultCommand`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeGetDefaultCommand(requestParameters: ComposeGetDefaultCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeGetDefaultCommandRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeGetTagsRaw(requestParameters: ComposeGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['baseUrl'] != null) {
            queryParameters['baseUrl'] = requestParameters['baseUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.getTags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeGetTags(requestParameters: ComposeGetTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeGetTagsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeImportRaw(requestParameters: ComposeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeProcessTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'composeProcessTemplateRequest',
                'Required parameter "composeProcessTemplateRequest" was null or undefined when calling composeImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.import`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeProcessTemplateRequestToJSON(requestParameters['composeProcessTemplateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeImport(requestParameters: ComposeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeIsolatedDeploymentRaw(requestParameters: ComposeIsolatedDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeRandomizeComposeRequest'] == null) {
            throw new runtime.RequiredError(
                'composeRandomizeComposeRequest',
                'Required parameter "composeRandomizeComposeRequest" was null or undefined when calling composeIsolatedDeployment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.isolatedDeployment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeRandomizeComposeRequestToJSON(requestParameters['composeRandomizeComposeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeIsolatedDeployment(requestParameters: ComposeIsolatedDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeIsolatedDeploymentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeLoadServicesRaw(requestParameters: ComposeLoadServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeId'] == null) {
            throw new runtime.RequiredError(
                'composeId',
                'Required parameter "composeId" was null or undefined when calling composeLoadServices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['composeId'] != null) {
            queryParameters['composeId'] = requestParameters['composeId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.loadServices`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeLoadServices(requestParameters: ComposeLoadServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeLoadServicesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeMoveRaw(requestParameters: ComposeMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeMoveRequest'] == null) {
            throw new runtime.RequiredError(
                'composeMoveRequest',
                'Required parameter "composeMoveRequest" was null or undefined when calling composeMove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.move`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeMoveRequestToJSON(requestParameters['composeMoveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeMove(requestParameters: ComposeMoveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeMoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeOneRaw(requestParameters: ComposeOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeId'] == null) {
            throw new runtime.RequiredError(
                'composeId',
                'Required parameter "composeId" was null or undefined when calling composeOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['composeId'] != null) {
            queryParameters['composeId'] = requestParameters['composeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeOne(requestParameters: ComposeOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeProcessTemplateRaw(requestParameters: ComposeProcessTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeProcessTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'composeProcessTemplateRequest',
                'Required parameter "composeProcessTemplateRequest" was null or undefined when calling composeProcessTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.processTemplate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeProcessTemplateRequestToJSON(requestParameters['composeProcessTemplateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeProcessTemplate(requestParameters: ComposeProcessTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeProcessTemplateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeRandomizeComposeRaw(requestParameters: ComposeRandomizeComposeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeRandomizeComposeRequest'] == null) {
            throw new runtime.RequiredError(
                'composeRandomizeComposeRequest',
                'Required parameter "composeRandomizeComposeRequest" was null or undefined when calling composeRandomizeCompose().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.randomizeCompose`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeRandomizeComposeRequestToJSON(requestParameters['composeRandomizeComposeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeRandomizeCompose(requestParameters: ComposeRandomizeComposeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeRandomizeComposeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeRedeployRaw(requestParameters: ComposeRedeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeRedeploy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.redeploy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeRedeploy(requestParameters: ComposeRedeployRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeRedeployRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeRefreshTokenRaw(requestParameters: ComposeRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeRefreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.refreshToken`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeRefreshToken(requestParameters: ComposeRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeRefreshTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeStartRaw(requestParameters: ComposeStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeStart(requestParameters: ComposeStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeStopRaw(requestParameters: ComposeStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeCleanQueuesRequest'] == null) {
            throw new runtime.RequiredError(
                'composeCleanQueuesRequest',
                'Required parameter "composeCleanQueuesRequest" was null or undefined when calling composeStop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.stop`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeCleanQueuesRequestToJSON(requestParameters['composeCleanQueuesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeStop(requestParameters: ComposeStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeStopRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeTemplatesRaw(requestParameters: ComposeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['baseUrl'] != null) {
            queryParameters['baseUrl'] = requestParameters['baseUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeTemplates(requestParameters: ComposeTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeTemplatesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async composeUpdateRaw(requestParameters: ComposeUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['composeUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'composeUpdateRequest',
                'Required parameter "composeUpdateRequest" was null or undefined when calling composeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/compose.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComposeUpdateRequestToJSON(requestParameters['composeUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async composeUpdate(requestParameters: ComposeUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.composeUpdateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ComposeLoadServicesTypeEnum = {
    Fetch: 'fetch',
    Cache: 'cache'
} as const;
export type ComposeLoadServicesTypeEnum = typeof ComposeLoadServicesTypeEnum[keyof typeof ComposeLoadServicesTypeEnum];
