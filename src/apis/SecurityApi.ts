/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  SecurityCreateRequest,
  SecurityDeleteRequest,
  SecurityUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    SecurityCreateRequestFromJSON,
    SecurityCreateRequestToJSON,
    SecurityDeleteRequestFromJSON,
    SecurityDeleteRequestToJSON,
    SecurityUpdateRequestFromJSON,
    SecurityUpdateRequestToJSON,
} from '../models/index';

export interface SecurityCreateOperationRequest {
    securityCreateRequest: SecurityCreateRequest;
}

export interface SecurityDeleteOperationRequest {
    securityDeleteRequest: SecurityDeleteRequest;
}

export interface SecurityOneRequest {
    securityId: string;
}

export interface SecurityUpdateOperationRequest {
    securityUpdateRequest: SecurityUpdateRequest;
}

/**
 * 
 */
export class SecurityApi extends runtime.BaseAPI {

    /**
     */
    async securityCreateRaw(requestParameters: SecurityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['securityCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'securityCreateRequest',
                'Required parameter "securityCreateRequest" was null or undefined when calling securityCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/security.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityCreateRequestToJSON(requestParameters['securityCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async securityCreate(requestParameters: SecurityCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.securityCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async securityDeleteRaw(requestParameters: SecurityDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['securityDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'securityDeleteRequest',
                'Required parameter "securityDeleteRequest" was null or undefined when calling securityDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/security.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityDeleteRequestToJSON(requestParameters['securityDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async securityDelete(requestParameters: SecurityDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.securityDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async securityOneRaw(requestParameters: SecurityOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['securityId'] == null) {
            throw new runtime.RequiredError(
                'securityId',
                'Required parameter "securityId" was null or undefined when calling securityOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['securityId'] != null) {
            queryParameters['securityId'] = requestParameters['securityId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/security.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async securityOne(requestParameters: SecurityOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.securityOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async securityUpdateRaw(requestParameters: SecurityUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['securityUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'securityUpdateRequest',
                'Required parameter "securityUpdateRequest" was null or undefined when calling securityUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/security.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityUpdateRequestToJSON(requestParameters['securityUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async securityUpdate(requestParameters: SecurityUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.securityUpdateRaw(requestParameters, initOverrides);
    }

}
