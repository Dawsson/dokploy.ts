/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  PreviewDeploymentDeleteRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    PreviewDeploymentDeleteRequestFromJSON,
    PreviewDeploymentDeleteRequestToJSON,
} from '../models/index';

export interface PreviewDeploymentAllRequest {
    applicationId: string;
}

export interface PreviewDeploymentDeleteOperationRequest {
    previewDeploymentDeleteRequest: PreviewDeploymentDeleteRequest;
}

export interface PreviewDeploymentOneRequest {
    previewDeploymentId: string;
}

/**
 * 
 */
export class PreviewDeploymentApi extends runtime.BaseAPI {

    /**
     */
    async previewDeploymentAllRaw(requestParameters: PreviewDeploymentAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling previewDeploymentAll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/previewDeployment.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async previewDeploymentAll(requestParameters: PreviewDeploymentAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.previewDeploymentAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async previewDeploymentDeleteRaw(requestParameters: PreviewDeploymentDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['previewDeploymentDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'previewDeploymentDeleteRequest',
                'Required parameter "previewDeploymentDeleteRequest" was null or undefined when calling previewDeploymentDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/previewDeployment.delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreviewDeploymentDeleteRequestToJSON(requestParameters['previewDeploymentDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async previewDeploymentDelete(requestParameters: PreviewDeploymentDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.previewDeploymentDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async previewDeploymentOneRaw(requestParameters: PreviewDeploymentOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['previewDeploymentId'] == null) {
            throw new runtime.RequiredError(
                'previewDeploymentId',
                'Required parameter "previewDeploymentId" was null or undefined when calling previewDeploymentOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['previewDeploymentId'] != null) {
            queryParameters['previewDeploymentId'] = requestParameters['previewDeploymentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/previewDeployment.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async previewDeploymentOne(requestParameters: PreviewDeploymentOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.previewDeploymentOneRaw(requestParameters, initOverrides);
    }

}
