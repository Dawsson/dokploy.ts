/* tslint:disable */
/* eslint-disable */
/**
 * Dokploy API
 * Endpoints for dokploy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  ServerCreateRequest,
  ServerSetupMonitoringRequest,
  ServerSetupRequest,
  ServerUpdateRequest,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    ServerCreateRequestFromJSON,
    ServerCreateRequestToJSON,
    ServerSetupMonitoringRequestFromJSON,
    ServerSetupMonitoringRequestToJSON,
    ServerSetupRequestFromJSON,
    ServerSetupRequestToJSON,
    ServerUpdateRequestFromJSON,
    ServerUpdateRequestToJSON,
} from '../models/index';

export interface ServerCreateOperationRequest {
    serverCreateRequest: ServerCreateRequest;
}

export interface ServerGetDefaultCommandRequest {
    serverId: string;
}

export interface ServerGetServerMetricsRequest {
    url: string;
    token: string;
    dataPoints: string;
}

export interface ServerOneRequest {
    serverId: string;
}

export interface ServerRemoveRequest {
    serverSetupRequest: ServerSetupRequest;
}

export interface ServerSecurityRequest {
    serverId: string;
}

export interface ServerSetupOperationRequest {
    serverSetupRequest: ServerSetupRequest;
}

export interface ServerSetupMonitoringOperationRequest {
    serverSetupMonitoringRequest: ServerSetupMonitoringRequest;
}

export interface ServerUpdateOperationRequest {
    serverUpdateRequest: ServerUpdateRequest;
}

export interface ServerValidateRequest {
    serverId: string;
}

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     */
    async serverAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverAllRaw(initOverrides);
    }

    /**
     */
    async serverCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverCountRaw(initOverrides);
    }

    /**
     */
    async serverCreateRaw(requestParameters: ServerCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'serverCreateRequest',
                'Required parameter "serverCreateRequest" was null or undefined when calling serverCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerCreateRequestToJSON(requestParameters['serverCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverCreate(requestParameters: ServerCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverGetDefaultCommandRaw(requestParameters: ServerGetDefaultCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling serverGetDefaultCommand().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.getDefaultCommand`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverGetDefaultCommand(requestParameters: ServerGetDefaultCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverGetDefaultCommandRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverGetServerMetricsRaw(requestParameters: ServerGetServerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling serverGetServerMetrics().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling serverGetServerMetrics().'
            );
        }

        if (requestParameters['dataPoints'] == null) {
            throw new runtime.RequiredError(
                'dataPoints',
                'Required parameter "dataPoints" was null or undefined when calling serverGetServerMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['dataPoints'] != null) {
            queryParameters['dataPoints'] = requestParameters['dataPoints'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.getServerMetrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverGetServerMetrics(requestParameters: ServerGetServerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverGetServerMetricsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverOneRaw(requestParameters: ServerOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling serverOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.one`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverOne(requestParameters: ServerOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverPublicIpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.publicIp`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverPublicIp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverPublicIpRaw(initOverrides);
    }

    /**
     */
    async serverRemoveRaw(requestParameters: ServerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverSetupRequest'] == null) {
            throw new runtime.RequiredError(
                'serverSetupRequest',
                'Required parameter "serverSetupRequest" was null or undefined when calling serverRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerSetupRequestToJSON(requestParameters['serverSetupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverRemove(requestParameters: ServerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverSecurityRaw(requestParameters: ServerSecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling serverSecurity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.security`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverSecurity(requestParameters: ServerSecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverSecurityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverSetupRaw(requestParameters: ServerSetupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverSetupRequest'] == null) {
            throw new runtime.RequiredError(
                'serverSetupRequest',
                'Required parameter "serverSetupRequest" was null or undefined when calling serverSetup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.setup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerSetupRequestToJSON(requestParameters['serverSetupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverSetup(requestParameters: ServerSetupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverSetupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverSetupMonitoringRaw(requestParameters: ServerSetupMonitoringOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverSetupMonitoringRequest'] == null) {
            throw new runtime.RequiredError(
                'serverSetupMonitoringRequest',
                'Required parameter "serverSetupMonitoringRequest" was null or undefined when calling serverSetupMonitoring().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.setupMonitoring`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerSetupMonitoringRequestToJSON(requestParameters['serverSetupMonitoringRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverSetupMonitoring(requestParameters: ServerSetupMonitoringOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverSetupMonitoringRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverUpdateRaw(requestParameters: ServerUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'serverUpdateRequest',
                'Required parameter "serverUpdateRequest" was null or undefined when calling serverUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerUpdateRequestToJSON(requestParameters['serverUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverUpdate(requestParameters: ServerUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverValidateRaw(requestParameters: ServerValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling serverValidate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serverId'] != null) {
            queryParameters['serverId'] = requestParameters['serverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.validate`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverValidate(requestParameters: ServerValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverValidateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async serverWithSSHKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKey authentication
        }


        let urlPath = `/server.withSSHKey`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async serverWithSSHKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serverWithSSHKeyRaw(initOverrides);
    }

}
